# Top CMakeLists.txt file for building the netcdf library using
# cmake instead of gnu configure.
#
# This file is tailored to BRAT purposes, and is not really
# suitable for stand-alone netcdf compilation (although it could
# serve as a good starting point.

project(NETCDF)
cmake_minimum_required(VERSION 2.6.1)

set(NETCDF_LARGE_FILES ON)
set(NETCDF_BUILD_PROGRAMS ON)
set(NETCDF_V2_COMPATIBILITY OFF)
set(NETCDF_BUILD_CXX ON)

if(NETCDF_LARGE_FILES)
  add_definitions(-D_FILE_OFFSET_BITS=64)
  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -D_FILE_OFFSET_BITS=64")
endif(NETCDF_LARGE_FILES)

if(NOT NETCDF_V2_COMPATIBILITY)
  add_definitions(-DNO_NETCDF_2)
endif(NOT NETCDF_V2_COMPATIBILITY)

include(CheckFunctionExists)
include(CheckSymbolExists)
include(CheckIncludeFile)
include(CheckTypeSize)
include(TestBigEndian)
include(CheckTypeExists)

macro(find_INCLUDE FILE VARIABLE)
  check_include_file(${FILE} ${VARIABLE})
  if(${VARIABLE})
    set(INCLUDES ${INCLUDES} ${FILE})
  endif(${VARIABLE})
endmacro(find_INCLUDE)

set(INCLUDES "")

find_include(stdarg.h		HAVE_STDARG_H)
find_include(stddef.h		HAVE_STDDEF_H)
find_include(stdlib.h		HAVE_STDLIB_H)
find_include(unistd.h		HAVE_UNISTD_H)
find_include(string.h		HAVE_STRING_H)
find_include(sys/types.h	HAVE_SYS_TYPES_H)
find_include(limits.h		HAVE_LIMITS_H)
find_include(time.h			HAVE_TIME_H)
find_include(alloca.h		HAVE_ALLOCA_H)
find_include(malloc.h		HAVE_MALLOC_H)


check_function_exists(strerror HAVE_STRERROR)
check_function_exists(ftruncate HAVE_FTRUNCATE)
check_symbol_exists(alloca "${INCLUDES}" HAVE_ALLOCA)
check_type_exists(uchar "${INCLUDES}" HAVE_UCHAR)
set(UCHAR "unsigned char")
check_type_exists(off_t "${INCLUDES}" HAVE_OFF_T)
set(OFF_T "long")
check_type_exists(size_t "${INCLUDES}" HAVE_SIZE_T)
set(SIZE_T "long")
check_type_exists(ssize_t "${INCLUDES}" HAVE_SSIZE_T)
set(SSIZE_T "int")
check_type_exists(ptrdiff_t "${INCLUDES}" HAVE_PTRDIFF_T)
set(PTRDIFF_T "int")

set(CMAKE_EXTRA_INCLUDE_FILES ${INCLUDES})

check_type_size(size_t SIZEOF_SIZE_T)
check_type_size(off_t SIZEOF_OFF_T)
check_type_size(double SIZEOF_DOUBLE)
check_type_size(float SIZEOF_FLOAT)
check_type_size(int SIZEOF_INT)
check_type_size(long SIZEOF_LONG)
check_type_size(short SIZEOF_SHORT)
test_big_endian(WORDS_BIGENDIAN)

if(HAVE_STDLIB_H AND HAVE_STDDEF_H)
  set(STDC_HEADERS 1)
endif(HAVE_STDLIB_H AND HAVE_STDDEF_H)
if(NOT HAVE_SYS_TYPES_H)
  set(NO_SYS_TYPES_H 1)
endif(NOT HAVE_SYS_TYPES_H)
if(NOT HAVE_STRERROR)
  set(NO_STRERROR 1)
endif(NOT HAVE_STRERROR)

set(NETCDF_INCLUDE_DIRS
  ${CMAKE_CURRENT_SOURCE_DIR}/libsrc
  ${CMAKE_CURRENT_SOURCE_DIR}/cxx
  CACHE INTERNAL "Include directories for the netcdf library")

include_directories(
  ${CMAKE_CURRENT_BINARY_DIR}/
  ${NETCDF_INCLUDE_DIRS})

set(SOURCES
  libsrc/attr.c
  libsrc/dim.c
  libsrc/error.c
  libsrc/libvers.c
  libsrc/nc.c
  libsrc/posixio.c
  libsrc/ncx.c
  libsrc/putget.c
  libsrc/string.c
  libsrc/v1hpg.c
  libsrc/v2i.c
  libsrc/var.c
  )

include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}/libsrc
  )

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/config.h)

add_library(netcdf STATIC ${SOURCES})
set_target_properties(netcdf PROPERTIES VERSION 3.6.2 SOVERSION 1)

install(TARGETS netcdf DESTINATION lib)
install(FILES libsrc/netcdf.h DESTINATION include)


if(NETCDF_V2_COMPATIBILITY AND NETCDF_BUILD_CXX)

  set(SOURCES
    cxx/ncvalues.cpp
    cxx/netcdf.cpp
    )

  INCLUDE_DIRECTORIES(
    ${CMAKE_CURRENT_SOURCE_DIR}/cxx
    )

  add_library(netcdf_c++ STATIC ${SOURCES})
  set_target_properties(netcdf_c++ PROPERTIES VERSION 3.6.2 SOVERSION 1)

  install(TARGETS netcdf_c++ DESTINATION lib)
  install(FILES cxx/netcdfcpp.h cxx/netcdf.hh DESTINATION include)

endif(NETCDF_V2_COMPATIBILITY AND NETCDF_BUILD_CXX)

if(NETCDF_BUILD_PROGRAMS)

  set(SOURCES
    ncdump/dumplib.c
    ncdump/ncdump.c
    ncdump/vardata.c
    )

  if(WIN32)
    set(SOURCES ${SOURCES} ncdump/getopt.c)
  endif(WIN32)


  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/ncdump
    )

  add_executable(ncdump ${SOURCES})
  target_link_libraries(ncdump netcdf)
  install(TARGETS ncdump DESTINATION bin)


  set(SOURCES
    ncgen/escapes.c
    ncgen/genlib.c
    ncgen/getfill.c
    ncgen/init.c
    ncgen/load.c
    ncgen/main.c
    ncgen/ncgentab.c
    )

  if(WIN32)
    set(SOURCES ${SOURCES} ncgen/getopt.c)
  endif(WIN32)

  include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/ncgen
    )

  add_executable(ncgen ${SOURCES})
  target_link_libraries(ncgen netcdf)
  install(TARGETS ncgen DESTINATION bin)

endif(NETCDF_BUILD_PROGRAMS)
