//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: BratScheduler.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

// Temporary hack to prevent the inclusion of Windows XML 
// headers, which collide with xerces
//
#if defined (WIN32) || defined (_WIN32)
//avoid later inclusion of Microsoft XML stuff, which causes name collisions with xerces
#define DOMDocument MsDOMDocument
#include <msxml.h>
#include <urlmon.h>
#undef DOMDocument
#endif


#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "BratScheduler_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "BratScheduler_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
//#include "Process.h"

#include "brathl.h"

#include "TaskListView.h"
#include "BratSchedulerApp.h"
#include "Validators.h"
#include "LabeledTextCtrl.h"
#include "CheckListBox.h"

//#include "DatasetTreeCtrl.h"
//#include "FieldsTreeCtrl.h"
//#include "OperationTreeCtrl.h"

CFloatValidator floatValidator;
CFloatExtendedValidator floatExtendedValidator;
CDigitValidator digitValidator;
CDateValidator dateValidator;
wxTextValidator textValidator;

int32_t charwidth, charheight;


// Implement window functions

wxSizer *MainNoteBook( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxNotebook *item2 = new wxNotebook( parent, ID_MAINNOTEBOOK, wxDefaultPosition, wxDefaultSize, 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    item0->Add( item1, 1, wxGROW|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *LogPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxPanel *item1 = new wxPanel( parent, ID_LOGPANEL, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *PendingPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxPanel *item1 = new wxPanel( parent, ID_PENDINGPANEL, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ProcessingPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxPanel *item1 = new wxPanel( parent, ID_PROCESSINGPANEL, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *EndedPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxPanel *item1 = new wxPanel( parent, ID_ENDEDPANEL, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *PendingListPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    CTaskListView *item3 = new CTaskListView( parent, ID_LIST_PENDING, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item2->Add( item3, 20, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( 10, 10, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 15, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxButton *item5 = new wxButton( parent, ID_REMOVE_PENDING, _("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_CLEAR_PENDING, _("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item4, 2, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *LogInfoPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_LOG_MESS, wxT(""), wxDefaultPosition, wxSize(80,40), wxTE_MULTILINE|wxTE_READONLY );
    item2->Add( item3, 15, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( 10, 10, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item2, 15, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxButton *item5 = new wxButton( parent, ID_LOG_CLEAR, _("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item4, 2, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ProcessingListPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    CTaskListView *item3 = new CTaskListView( parent, ID_LIST_PROCESSING, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item2->Add( item3, 20, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( 10, 10, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 15, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxButton *item5 = new wxButton( parent, ID_KILL_PROCESSING, _("Kill"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item4, 2, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *EndedListPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    CTaskListView *item3 = new CTaskListView( parent, ID_LIST_ENDED, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item2->Add( item3, 20, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( 10, 10, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 15, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxButton *item5 = new wxButton( parent, ID_REMOVE_ENDED, _("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_CLEAR_ENDED, _("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item4->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_SHOW_LOG, _("Show log"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item4, 2, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MainMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( ID_VIEW_XML_CONFIG, _("&View configuration"), wxT("") );
    item1->AppendSeparator();
    item1->Append( wxID_EXIT, _("&Quit\tAlt-q"), wxT("") );
    item0->Append( item1, _("&Application") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( wxID_ABOUT, _("&About"), wxT("") );
    item2->AppendSeparator();
    item2->Append( ID_HELP_USER_MANUEL, _("&User's manual"), _("Open the user's manual") );
    item0->Append( item2, _("&Help") );
    
    return item0;
}

// Implement toolbar functions

// Implement bitmap functions

wxBitmap BitmapsList( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 5 1",
        "a c #909090",
        "b c #9F9F9F",
        "c c #C0C0C0",
        "d c #DFDFDF",
        "e c #606060",
        /* pixels */
        "cccccccccccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc",
        "ccceeeeeeeeebccc",
        "ccccaccccccdcccc",
        "ccccaccccccdcccc",
        "cccccaccccdccccc",
        "cccccaccccdccccc",
        "ccccccaccdcccccc",
        "ccccccaccdcccccc",
        "cccccccadccccccc",
        "cccccccadccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 5 1",
        "  c None",
        "b c #C0C0C0",
        "c c #CFCFCF",
        "d c #DFDFDF",
        "e c #606060",
        /* pixels */
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbecbbbbbbb",
        "bbbbbbbecbbbbbbb",
        "bbbbbbebb bbbbbb",
        "bbbbbbebbcbbbbbb",
        "bbbbbebbbbcbbbbb",
        "bbbbbebbbbcbbbbb",
        "bbbbebbbbbbcbbbb",
        "bbbbebbbbbbcbbbb",
        "bbbedddddddddbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
