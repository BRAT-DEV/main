// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef BRAT_XSD_GUARD_SCHEDULED_TASKS_LIST_HXX
#define BRAT_XSD_GUARD_SCHEDULED_TASKS_LIST_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class task;
class processingTasks;
class pendingTasks;
class endedTasks;
class bratSchedulerConfig;
class arg;
class at;
class function;
class name;
class status;
class uid;
class type;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class task: public ::xml_schema::type
{
  public:
  // arg
  //
  typedef ::arg arg_type;
  typedef ::xsd::cxx::tree::sequence< arg_type > arg_sequence;
  typedef arg_sequence::iterator arg_iterator;
  typedef arg_sequence::const_iterator arg_const_iterator;
  typedef ::xsd::cxx::tree::traits< arg_type, char > arg_traits;

  const arg_sequence&
  arg () const;

  arg_sequence&
  arg ();

  void
  arg (const arg_sequence& s);

  // task
  //
  typedef ::task task1_type;
  typedef ::xsd::cxx::tree::optional< task1_type > task1_optional;
  typedef ::xsd::cxx::tree::traits< task1_type, char > task1_traits;

  const task1_optional&
  task1 () const;

  task1_optional&
  task1 ();

  void
  task1 (const task1_type& x);

  void
  task1 (const task1_optional& x);

  void
  task1 (::std::auto_ptr< task1_type > p);

  // at
  //
  typedef ::at at_type;
  typedef ::xsd::cxx::tree::traits< at_type, char > at_traits;

  const at_type&
  at () const;

  at_type&
  at ();

  void
  at (const at_type& x);

  void
  at (::std::auto_ptr< at_type > p);

  // function
  //
  typedef ::function function_type;
  typedef ::xsd::cxx::tree::optional< function_type > function_optional;
  typedef ::xsd::cxx::tree::traits< function_type, char > function_traits;

  const function_optional&
  function () const;

  function_optional&
  function ();

  void
  function (const function_type& x);

  void
  function (const function_optional& x);

  void
  function (::std::auto_ptr< function_type > p);

  // cmd
  //
  typedef ::xml_schema::string cmd_type;
  typedef ::xsd::cxx::tree::optional< cmd_type > cmd_optional;
  typedef ::xsd::cxx::tree::traits< cmd_type, char > cmd_traits;

  const cmd_optional&
  cmd () const;

  cmd_optional&
  cmd ();

  void
  cmd (const cmd_type& x);

  void
  cmd (const cmd_optional& x);

  void
  cmd (::std::auto_ptr< cmd_type > p);

  // logFile
  //
  typedef ::xml_schema::string logFile_type;
  typedef ::xsd::cxx::tree::traits< logFile_type, char > logFile_traits;

  const logFile_type&
  logFile () const;

  logFile_type&
  logFile ();

  void
  logFile (const logFile_type& x);

  void
  logFile (::std::auto_ptr< logFile_type > p);

  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // status
  //
  typedef ::status status_type;
  typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

  const status_type&
  status () const;

  status_type&
  status ();

  void
  status (const status_type& x);

  void
  status (::std::auto_ptr< status_type > p);

  // uid
  //
  typedef ::uid uid_type;
  typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

  const uid_type&
  uid () const;

  uid_type&
  uid ();

  void
  uid (const uid_type& x);

  void
  uid (::std::auto_ptr< uid_type > p);

  // Constructors.
  //
  task ();

  task (const at_type&,
        const logFile_type&,
        const name_type&,
        const status_type&,
        const uid_type&);

  task (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  task (const task& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual task*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  task&
  operator= (const task& x);

  virtual 
  ~task ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  arg_sequence arg_;
  task1_optional task1_;
  ::xsd::cxx::tree::one< at_type > at_;
  function_optional function_;
  cmd_optional cmd_;
  ::xsd::cxx::tree::one< logFile_type > logFile_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< status_type > status_;
  ::xsd::cxx::tree::one< uid_type > uid_;
};

class processingTasks: public ::xml_schema::type
{
  public:
  // task
  //
  typedef ::task task_type;
  typedef ::xsd::cxx::tree::sequence< task_type > task_sequence;
  typedef task_sequence::iterator task_iterator;
  typedef task_sequence::const_iterator task_const_iterator;
  typedef ::xsd::cxx::tree::traits< task_type, char > task_traits;

  const task_sequence&
  task () const;

  task_sequence&
  task ();

  void
  task (const task_sequence& s);

  // Constructors.
  //
  processingTasks ();

  processingTasks (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  processingTasks (const processingTasks& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual processingTasks*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  processingTasks&
  operator= (const processingTasks& x);

  virtual 
  ~processingTasks ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  task_sequence task_;
};

class pendingTasks: public ::xml_schema::type
{
  public:
  // task
  //
  typedef ::task task_type;
  typedef ::xsd::cxx::tree::sequence< task_type > task_sequence;
  typedef task_sequence::iterator task_iterator;
  typedef task_sequence::const_iterator task_const_iterator;
  typedef ::xsd::cxx::tree::traits< task_type, char > task_traits;

  const task_sequence&
  task () const;

  task_sequence&
  task ();

  void
  task (const task_sequence& s);

  // Constructors.
  //
  pendingTasks ();

  pendingTasks (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  pendingTasks (const pendingTasks& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual pendingTasks*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  pendingTasks&
  operator= (const pendingTasks& x);

  virtual 
  ~pendingTasks ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  task_sequence task_;
};

class endedTasks: public ::xml_schema::type
{
  public:
  // task
  //
  typedef ::task task_type;
  typedef ::xsd::cxx::tree::sequence< task_type > task_sequence;
  typedef task_sequence::iterator task_iterator;
  typedef task_sequence::const_iterator task_const_iterator;
  typedef ::xsd::cxx::tree::traits< task_type, char > task_traits;

  const task_sequence&
  task () const;

  task_sequence&
  task ();

  void
  task (const task_sequence& s);

  // Constructors.
  //
  endedTasks ();

  endedTasks (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  endedTasks (const endedTasks& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual endedTasks*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  endedTasks&
  operator= (const endedTasks& x);

  virtual 
  ~endedTasks ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  task_sequence task_;
};

class bratSchedulerConfig: public ::xml_schema::type
{
  public:
  // pendingTasks
  //
  typedef ::pendingTasks pendingTasks_type;
  typedef ::xsd::cxx::tree::traits< pendingTasks_type, char > pendingTasks_traits;

  const pendingTasks_type&
  pendingTasks () const;

  pendingTasks_type&
  pendingTasks ();

  void
  pendingTasks (const pendingTasks_type& x);

  void
  pendingTasks (::std::auto_ptr< pendingTasks_type > p);

  // endedTasks
  //
  typedef ::endedTasks endedTasks_type;
  typedef ::xsd::cxx::tree::traits< endedTasks_type, char > endedTasks_traits;

  const endedTasks_type&
  endedTasks () const;

  endedTasks_type&
  endedTasks ();

  void
  endedTasks (const endedTasks_type& x);

  void
  endedTasks (::std::auto_ptr< endedTasks_type > p);

  // processingTasks
  //
  typedef ::processingTasks processingTasks_type;
  typedef ::xsd::cxx::tree::traits< processingTasks_type, char > processingTasks_traits;

  const processingTasks_type&
  processingTasks () const;

  processingTasks_type&
  processingTasks ();

  void
  processingTasks (const processingTasks_type& x);

  void
  processingTasks (::std::auto_ptr< processingTasks_type > p);

  // Constructors.
  //
  bratSchedulerConfig ();

  bratSchedulerConfig (const pendingTasks_type&,
                       const endedTasks_type&,
                       const processingTasks_type&);

  bratSchedulerConfig (::std::auto_ptr< pendingTasks_type >,
                       ::std::auto_ptr< endedTasks_type >,
                       ::std::auto_ptr< processingTasks_type >);

  bratSchedulerConfig (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  bratSchedulerConfig (const bratSchedulerConfig& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual bratSchedulerConfig*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  bratSchedulerConfig&
  operator= (const bratSchedulerConfig& x);

  virtual 
  ~bratSchedulerConfig ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< pendingTasks_type > pendingTasks_;
  ::xsd::cxx::tree::one< endedTasks_type > endedTasks_;
  ::xsd::cxx::tree::one< processingTasks_type > processingTasks_;
};

class arg: public ::xml_schema::string
{
  public:
  // type
  //
  typedef ::type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  arg ();

  arg (const type_type&);

  arg (const char*,
       const type_type&);

  arg (const ::std::string&,
       const type_type&);

  arg (const ::xml_schema::string&,
       const type_type&);

  arg (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  arg (const arg& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual arg*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  arg&
  operator= (const arg& x);

  virtual 
  ~arg ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
};

class at: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  at ();

  at (const char*);

  at (const ::std::string&);

  at (const ::xml_schema::string&);

  at (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  at (const ::xercesc::DOMAttr& a,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  at (const ::std::string& s,
      const ::xercesc::DOMElement* e,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  at (const at& x,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  virtual at*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~at ();
};

class function: public ::xml_schema::string
{
  public:
  enum value
  {
    CopyFile
  };

  function ();

  function (value v);

  function (const char* v);

  function (const ::std::string& v);

  function (const ::xml_schema::string& v);

  function (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  function (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  function (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  function (const function& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual function*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  function&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_function_convert ();
  }

  protected:
  value
  _xsd_function_convert () const;

  public:
  static const char* const _xsd_function_literals_[1];
  static const value _xsd_function_indexes_[1];
};

class name: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  name ();

  name (const char*);

  name (const ::std::string&);

  name (const ::xml_schema::string&);

  name (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const name& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual name*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~name ();
};

class status: public ::xml_schema::string
{
  public:
  enum value
  {
    pending,
    processing,
    ended
  };

  status ();

  status (value v);

  status (const char* v);

  status (const ::std::string& v);

  status (const ::xml_schema::string& v);

  status (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  status (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  status (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  status (const status& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual status*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  status&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_status_convert ();
  }

  protected:
  value
  _xsd_status_convert () const;

  public:
  static const char* const _xsd_status_literals_[3];
  static const value _xsd_status_indexes_[3];
};

class uid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  uid ();

  uid (const ::xml_schema::long_&);

  uid (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  uid (const ::xercesc::DOMAttr& a,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  uid (const ::std::string& s,
       const ::xercesc::DOMElement* e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  uid (const uid& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual uid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~uid ();
};

class type: public ::xml_schema::string
{
  public:
  enum value
  {
    undefined,
    integer,
    long_,
    float_,
    double_,
    char_,
    string,
    array_of_double
  };

  type ();

  type (value v);

  type (const char* v);

  type (const ::std::string& v);

  type (const ::xml_schema::string& v);

  type (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const type& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_type_convert ();
  }

  protected:
  value
  _xsd_type_convert () const;

  public:
  static const char* const _xsd_type_literals_[8];
  static const value _xsd_type_indexes_[8];
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::task >
task_ (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::task >
task_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::task >
task_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::task >
task_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::arg >
arg_ (const ::std::string& uri,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (const ::std::string& uri,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (const ::std::string& uri,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      const ::std::string& id,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::arg >
arg_ (::xercesc::InputSource& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::xercesc::InputSource& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::xercesc::InputSource& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::arg >
arg_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::arg >
arg_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
task_ (::std::ostream& os,
       const ::task& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
task_ (::std::ostream& os,
       const ::task& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
task_ (::std::ostream& os,
       const ::task& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
task_ (::xercesc::XMLFormatTarget& ft,
       const ::task& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
task_ (::xercesc::XMLFormatTarget& ft,
       const ::task& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

void
task_ (::xercesc::XMLFormatTarget& ft,
       const ::task& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
task_ (::xercesc::DOMDocument& d,
       const ::task& x,
       ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
task_ (const ::task& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
processingTasks_ (::std::ostream& os,
                  const ::processingTasks& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

void
processingTasks_ (::std::ostream& os,
                  const ::processingTasks& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

void
processingTasks_ (::std::ostream& os,
                  const ::processingTasks& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
processingTasks_ (::xercesc::XMLFormatTarget& ft,
                  const ::processingTasks& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

void
processingTasks_ (::xercesc::XMLFormatTarget& ft,
                  const ::processingTasks& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

void
processingTasks_ (::xercesc::XMLFormatTarget& ft,
                  const ::processingTasks& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
processingTasks_ (::xercesc::DOMDocument& d,
                  const ::processingTasks& x,
                  ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
processingTasks_ (const ::processingTasks& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
pendingTasks_ (::std::ostream& os,
               const ::pendingTasks& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
pendingTasks_ (::std::ostream& os,
               const ::pendingTasks& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
pendingTasks_ (::std::ostream& os,
               const ::pendingTasks& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
pendingTasks_ (::xercesc::XMLFormatTarget& ft,
               const ::pendingTasks& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
pendingTasks_ (::xercesc::XMLFormatTarget& ft,
               const ::pendingTasks& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

void
pendingTasks_ (::xercesc::XMLFormatTarget& ft,
               const ::pendingTasks& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
pendingTasks_ (::xercesc::DOMDocument& d,
               const ::pendingTasks& x,
               ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
pendingTasks_ (const ::pendingTasks& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
endedTasks_ (::std::ostream& os,
             const ::endedTasks& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
endedTasks_ (::std::ostream& os,
             const ::endedTasks& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
endedTasks_ (::std::ostream& os,
             const ::endedTasks& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
endedTasks_ (::xercesc::XMLFormatTarget& ft,
             const ::endedTasks& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
endedTasks_ (::xercesc::XMLFormatTarget& ft,
             const ::endedTasks& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
endedTasks_ (::xercesc::XMLFormatTarget& ft,
             const ::endedTasks& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
endedTasks_ (::xercesc::DOMDocument& d,
             const ::endedTasks& x,
             ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
endedTasks_ (const ::endedTasks& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
bratSchedulerConfig_ (::std::ostream& os,
                      const ::bratSchedulerConfig& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
bratSchedulerConfig_ (::std::ostream& os,
                      const ::bratSchedulerConfig& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
bratSchedulerConfig_ (::std::ostream& os,
                      const ::bratSchedulerConfig& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
bratSchedulerConfig_ (::xercesc::XMLFormatTarget& ft,
                      const ::bratSchedulerConfig& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
bratSchedulerConfig_ (::xercesc::XMLFormatTarget& ft,
                      const ::bratSchedulerConfig& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

void
bratSchedulerConfig_ (::xercesc::XMLFormatTarget& ft,
                      const ::bratSchedulerConfig& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
bratSchedulerConfig_ (::xercesc::DOMDocument& d,
                      const ::bratSchedulerConfig& x,
                      ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
bratSchedulerConfig_ (const ::bratSchedulerConfig& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

// Serialize to std::ostream.
//

void
arg_ (::std::ostream& os,
      const ::arg& x, 
      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
      const ::std::string& e = "UTF-8",
      ::xml_schema::flags f = 0);

void
arg_ (::std::ostream& os,
      const ::arg& x, 
      ::xml_schema::error_handler& eh,
      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
      const ::std::string& e = "UTF-8",
      ::xml_schema::flags f = 0);

void
arg_ (::std::ostream& os,
      const ::arg& x, 
      ::xercesc::DOMErrorHandler& eh,
      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
      const ::std::string& e = "UTF-8",
      ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
arg_ (::xercesc::XMLFormatTarget& ft,
      const ::arg& x, 
      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
      const ::std::string& e = "UTF-8",
      ::xml_schema::flags f = 0);

void
arg_ (::xercesc::XMLFormatTarget& ft,
      const ::arg& x, 
      ::xml_schema::error_handler& eh,
      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
      const ::std::string& e = "UTF-8",
      ::xml_schema::flags f = 0);

void
arg_ (::xercesc::XMLFormatTarget& ft,
      const ::arg& x, 
      ::xercesc::DOMErrorHandler& eh,
      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
      const ::std::string& e = "UTF-8",
      ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
arg_ (::xercesc::DOMDocument& d,
      const ::arg& x,
      ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
arg_ (const ::arg& x, 
      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
      ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const task&);

void
operator<< (::xercesc::DOMElement&, const processingTasks&);

void
operator<< (::xercesc::DOMElement&, const pendingTasks&);

void
operator<< (::xercesc::DOMElement&, const endedTasks&);

void
operator<< (::xercesc::DOMElement&, const bratSchedulerConfig&);

void
operator<< (::xercesc::DOMElement&, const arg&);

void
operator<< (::xercesc::DOMElement&, const at&);

void
operator<< (::xercesc::DOMAttr&, const at&);

void
operator<< (::xml_schema::list_stream&,
            const at&);

void
operator<< (::xercesc::DOMElement&, const function&);

void
operator<< (::xercesc::DOMAttr&, const function&);

void
operator<< (::xml_schema::list_stream&,
            const function&);

void
operator<< (::xercesc::DOMElement&, const name&);

void
operator<< (::xercesc::DOMAttr&, const name&);

void
operator<< (::xml_schema::list_stream&,
            const name&);

void
operator<< (::xercesc::DOMElement&, const status&);

void
operator<< (::xercesc::DOMAttr&, const status&);

void
operator<< (::xml_schema::list_stream&,
            const status&);

void
operator<< (::xercesc::DOMElement&, const uid&);

void
operator<< (::xercesc::DOMAttr&, const uid&);

void
operator<< (::xml_schema::list_stream&,
            const uid&);

void
operator<< (::xercesc::DOMElement&, const type&);

void
operator<< (::xercesc::DOMAttr&, const type&);

void
operator<< (::xml_schema::list_stream&,
            const type&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BRAT_XSD_GUARD_SCHEDULED_TASKS_LIST_HXX
