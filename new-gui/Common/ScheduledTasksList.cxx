// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ScheduledTasksList.hxx"

// task
// 

const task::arg_sequence& task::
arg () const
{
  return this->arg_;
}

task::arg_sequence& task::
arg ()
{
  return this->arg_;
}

void task::
arg (const arg_sequence& s)
{
  this->arg_ = s;
}

const task::task1_optional& task::
task1 () const
{
  return this->task1_;
}

task::task1_optional& task::
task1 ()
{
  return this->task1_;
}

void task::
task1 (const task1_type& x)
{
  this->task1_.set (x);
}

void task::
task1 (const task1_optional& x)
{
  this->task1_ = x;
}

void task::
task1 (::std::auto_ptr< task1_type > x)
{
  this->task1_.set (x);
}

const task::at_type& task::
at () const
{
  return this->at_.get ();
}

task::at_type& task::
at ()
{
  return this->at_.get ();
}

void task::
at (const at_type& x)
{
  this->at_.set (x);
}

void task::
at (::std::auto_ptr< at_type > x)
{
  this->at_.set (x);
}

const task::function_optional& task::
function () const
{
  return this->function_;
}

task::function_optional& task::
function ()
{
  return this->function_;
}

void task::
function (const function_type& x)
{
  this->function_.set (x);
}

void task::
function (const function_optional& x)
{
  this->function_ = x;
}

void task::
function (::std::auto_ptr< function_type > x)
{
  this->function_.set (x);
}

const task::cmd_optional& task::
cmd () const
{
  return this->cmd_;
}

task::cmd_optional& task::
cmd ()
{
  return this->cmd_;
}

void task::
cmd (const cmd_type& x)
{
  this->cmd_.set (x);
}

void task::
cmd (const cmd_optional& x)
{
  this->cmd_ = x;
}

void task::
cmd (::std::auto_ptr< cmd_type > x)
{
  this->cmd_.set (x);
}

const task::logFile_type& task::
logFile () const
{
  return this->logFile_.get ();
}

task::logFile_type& task::
logFile ()
{
  return this->logFile_.get ();
}

void task::
logFile (const logFile_type& x)
{
  this->logFile_.set (x);
}

void task::
logFile (::std::auto_ptr< logFile_type > x)
{
  this->logFile_.set (x);
}

const task::name_type& task::
name () const
{
  return this->name_.get ();
}

task::name_type& task::
name ()
{
  return this->name_.get ();
}

void task::
name (const name_type& x)
{
  this->name_.set (x);
}

void task::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const task::status_type& task::
status () const
{
  return this->status_.get ();
}

task::status_type& task::
status ()
{
  return this->status_.get ();
}

void task::
status (const status_type& x)
{
  this->status_.set (x);
}

void task::
status (::std::auto_ptr< status_type > x)
{
  this->status_.set (x);
}

const task::uid_type& task::
uid () const
{
  return this->uid_.get ();
}

task::uid_type& task::
uid ()
{
  return this->uid_.get ();
}

void task::
uid (const uid_type& x)
{
  this->uid_.set (x);
}

void task::
uid (::std::auto_ptr< uid_type > x)
{
  this->uid_.set (x);
}


// processingTasks
// 

const processingTasks::task_sequence& processingTasks::
task () const
{
  return this->task_;
}

processingTasks::task_sequence& processingTasks::
task ()
{
  return this->task_;
}

void processingTasks::
task (const task_sequence& s)
{
  this->task_ = s;
}


// pendingTasks
// 

const pendingTasks::task_sequence& pendingTasks::
task () const
{
  return this->task_;
}

pendingTasks::task_sequence& pendingTasks::
task ()
{
  return this->task_;
}

void pendingTasks::
task (const task_sequence& s)
{
  this->task_ = s;
}


// endedTasks
// 

const endedTasks::task_sequence& endedTasks::
task () const
{
  return this->task_;
}

endedTasks::task_sequence& endedTasks::
task ()
{
  return this->task_;
}

void endedTasks::
task (const task_sequence& s)
{
  this->task_ = s;
}


// bratSchedulerConfig
// 

const bratSchedulerConfig::pendingTasks_type& bratSchedulerConfig::
pendingTasks () const
{
  return this->pendingTasks_.get ();
}

bratSchedulerConfig::pendingTasks_type& bratSchedulerConfig::
pendingTasks ()
{
  return this->pendingTasks_.get ();
}

void bratSchedulerConfig::
pendingTasks (const pendingTasks_type& x)
{
  this->pendingTasks_.set (x);
}

void bratSchedulerConfig::
pendingTasks (::std::auto_ptr< pendingTasks_type > x)
{
  this->pendingTasks_.set (x);
}

const bratSchedulerConfig::endedTasks_type& bratSchedulerConfig::
endedTasks () const
{
  return this->endedTasks_.get ();
}

bratSchedulerConfig::endedTasks_type& bratSchedulerConfig::
endedTasks ()
{
  return this->endedTasks_.get ();
}

void bratSchedulerConfig::
endedTasks (const endedTasks_type& x)
{
  this->endedTasks_.set (x);
}

void bratSchedulerConfig::
endedTasks (::std::auto_ptr< endedTasks_type > x)
{
  this->endedTasks_.set (x);
}

const bratSchedulerConfig::processingTasks_type& bratSchedulerConfig::
processingTasks () const
{
  return this->processingTasks_.get ();
}

bratSchedulerConfig::processingTasks_type& bratSchedulerConfig::
processingTasks ()
{
  return this->processingTasks_.get ();
}

void bratSchedulerConfig::
processingTasks (const processingTasks_type& x)
{
  this->processingTasks_.set (x);
}

void bratSchedulerConfig::
processingTasks (::std::auto_ptr< processingTasks_type > x)
{
  this->processingTasks_.set (x);
}


// arg
// 

const arg::type_type& arg::
type () const
{
  return this->type_.get ();
}

arg::type_type& arg::
type ()
{
  return this->type_.get ();
}

void arg::
type (const type_type& x)
{
  this->type_.set (x);
}

void arg::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}


// at
// 


// function
// 

function::
function ()
: ::xml_schema::string ()
{
}

function::
function (value v)
: ::xml_schema::string (_xsd_function_literals_[v])
{
}

function::
function (const char* v)
: ::xml_schema::string (v)
{
}

function::
function (const ::std::string& v)
: ::xml_schema::string (v)
{
}

function::
function (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

function::
function (const function& v,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

function& function::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_function_literals_[v]);

  return *this;
}


// name
// 


// status
// 

status::
status ()
: ::xml_schema::string ()
{
}

status::
status (value v)
: ::xml_schema::string (_xsd_status_literals_[v])
{
}

status::
status (const char* v)
: ::xml_schema::string (v)
{
}

status::
status (const ::std::string& v)
: ::xml_schema::string (v)
{
}

status::
status (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

status::
status (const status& v,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

status& status::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_status_literals_[v]);

  return *this;
}


// uid
// 


// type
// 

type::
type ()
: ::xml_schema::string ()
{
}

type::
type (value v)
: ::xml_schema::string (_xsd_type_literals_[v])
{
}

type::
type (const char* v)
: ::xml_schema::string (v)
{
}

type::
type (const ::std::string& v)
: ::xml_schema::string (v)
{
}

type::
type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

type::
type (const type& v,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

type& type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_type_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// task
//

task::
task ()
: ::xml_schema::type (),
  arg_ (this),
  task1_ (this),
  at_ (this),
  function_ (this),
  cmd_ (this),
  logFile_ (this),
  name_ (this),
  status_ (this),
  uid_ (this)
{
}

task::
task (const at_type& at,
      const logFile_type& logFile,
      const name_type& name,
      const status_type& status,
      const uid_type& uid)
: ::xml_schema::type (),
  arg_ (this),
  task1_ (this),
  at_ (at, this),
  function_ (this),
  cmd_ (this),
  logFile_ (logFile, this),
  name_ (name, this),
  status_ (status, this),
  uid_ (uid, this)
{
}

task::
task (const task& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  arg_ (x.arg_, f, this),
  task1_ (x.task1_, f, this),
  at_ (x.at_, f, this),
  function_ (x.function_, f, this),
  cmd_ (x.cmd_, f, this),
  logFile_ (x.logFile_, f, this),
  name_ (x.name_, f, this),
  status_ (x.status_, f, this),
  uid_ (x.uid_, f, this)
{
}

task::
task (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  arg_ (this),
  task1_ (this),
  at_ (this),
  function_ (this),
  cmd_ (this),
  logFile_ (this),
  name_ (this),
  status_ (this),
  uid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void task::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // arg
    //
    if (n.name () == "arg" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< arg_type > r (
        arg_traits::create (i, f, this));

      this->arg_.push_back (r);
      continue;
    }

    // task
    //
    if (n.name () == "task" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< task1_type > r (
        task1_traits::create (i, f, this));

      if (!this->task1_)
      {
        this->task1_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "at" && n.namespace_ ().empty ())
    {
      this->at_.set (at_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "function" && n.namespace_ ().empty ())
    {
      this->function_.set (function_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "cmd" && n.namespace_ ().empty ())
    {
      this->cmd_.set (cmd_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "logFile" && n.namespace_ ().empty ())
    {
      this->logFile_.set (logFile_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (status_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (uid_traits::create (i, f, this));
      continue;
    }
  }

  if (!at_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "at",
      "");
  }

  if (!logFile_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "logFile",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!status_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "status",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

task* task::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class task (*this, f, c);
}

task& task::
operator= (const task& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->arg_ = x.arg_;
    this->task1_ = x.task1_;
    this->at_ = x.at_;
    this->function_ = x.function_;
    this->cmd_ = x.cmd_;
    this->logFile_ = x.logFile_;
    this->name_ = x.name_;
    this->status_ = x.status_;
    this->uid_ = x.uid_;
  }

  return *this;
}

task::
~task ()
{
}

// processingTasks
//

processingTasks::
processingTasks ()
: ::xml_schema::type (),
  task_ (this)
{
}

processingTasks::
processingTasks (const processingTasks& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  task_ (x.task_, f, this)
{
}

processingTasks::
processingTasks (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  task_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void processingTasks::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // task
    //
    if (n.name () == "task" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< task_type > r (
        task_traits::create (i, f, this));

      this->task_.push_back (r);
      continue;
    }

    break;
  }
}

processingTasks* processingTasks::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class processingTasks (*this, f, c);
}

processingTasks& processingTasks::
operator= (const processingTasks& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->task_ = x.task_;
  }

  return *this;
}

processingTasks::
~processingTasks ()
{
}

// pendingTasks
//

pendingTasks::
pendingTasks ()
: ::xml_schema::type (),
  task_ (this)
{
}

pendingTasks::
pendingTasks (const pendingTasks& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  task_ (x.task_, f, this)
{
}

pendingTasks::
pendingTasks (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  task_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void pendingTasks::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // task
    //
    if (n.name () == "task" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< task_type > r (
        task_traits::create (i, f, this));

      this->task_.push_back (r);
      continue;
    }

    break;
  }
}

pendingTasks* pendingTasks::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class pendingTasks (*this, f, c);
}

pendingTasks& pendingTasks::
operator= (const pendingTasks& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->task_ = x.task_;
  }

  return *this;
}

pendingTasks::
~pendingTasks ()
{
}

// endedTasks
//

endedTasks::
endedTasks ()
: ::xml_schema::type (),
  task_ (this)
{
}

endedTasks::
endedTasks (const endedTasks& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  task_ (x.task_, f, this)
{
}

endedTasks::
endedTasks (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  task_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void endedTasks::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // task
    //
    if (n.name () == "task" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< task_type > r (
        task_traits::create (i, f, this));

      this->task_.push_back (r);
      continue;
    }

    break;
  }
}

endedTasks* endedTasks::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class endedTasks (*this, f, c);
}

endedTasks& endedTasks::
operator= (const endedTasks& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->task_ = x.task_;
  }

  return *this;
}

endedTasks::
~endedTasks ()
{
}

// bratSchedulerConfig
//

bratSchedulerConfig::
bratSchedulerConfig ()
: ::xml_schema::type (),
  pendingTasks_ (this),
  endedTasks_ (this),
  processingTasks_ (this)
{
}

bratSchedulerConfig::
bratSchedulerConfig (const pendingTasks_type& pendingTasks,
                     const endedTasks_type& endedTasks,
                     const processingTasks_type& processingTasks)
: ::xml_schema::type (),
  pendingTasks_ (pendingTasks, this),
  endedTasks_ (endedTasks, this),
  processingTasks_ (processingTasks, this)
{
}

bratSchedulerConfig::
bratSchedulerConfig (::std::auto_ptr< pendingTasks_type > pendingTasks,
                     ::std::auto_ptr< endedTasks_type > endedTasks,
                     ::std::auto_ptr< processingTasks_type > processingTasks)
: ::xml_schema::type (),
  pendingTasks_ (pendingTasks, this),
  endedTasks_ (endedTasks, this),
  processingTasks_ (processingTasks, this)
{
}

bratSchedulerConfig::
bratSchedulerConfig (const bratSchedulerConfig& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  pendingTasks_ (x.pendingTasks_, f, this),
  endedTasks_ (x.endedTasks_, f, this),
  processingTasks_ (x.processingTasks_, f, this)
{
}

bratSchedulerConfig::
bratSchedulerConfig (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  pendingTasks_ (this),
  endedTasks_ (this),
  processingTasks_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void bratSchedulerConfig::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // pendingTasks
    //
    if (n.name () == "pendingTasks" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< pendingTasks_type > r (
        pendingTasks_traits::create (i, f, this));

      if (!pendingTasks_.present ())
      {
        this->pendingTasks_.set (r);
        continue;
      }
    }

    // endedTasks
    //
    if (n.name () == "endedTasks" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< endedTasks_type > r (
        endedTasks_traits::create (i, f, this));

      if (!endedTasks_.present ())
      {
        this->endedTasks_.set (r);
        continue;
      }
    }

    // processingTasks
    //
    if (n.name () == "processingTasks" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< processingTasks_type > r (
        processingTasks_traits::create (i, f, this));

      if (!processingTasks_.present ())
      {
        this->processingTasks_.set (r);
        continue;
      }
    }

    break;
  }

  if (!pendingTasks_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "pendingTasks",
      "");
  }

  if (!endedTasks_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "endedTasks",
      "");
  }

  if (!processingTasks_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "processingTasks",
      "");
  }
}

bratSchedulerConfig* bratSchedulerConfig::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bratSchedulerConfig (*this, f, c);
}

bratSchedulerConfig& bratSchedulerConfig::
operator= (const bratSchedulerConfig& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->pendingTasks_ = x.pendingTasks_;
    this->endedTasks_ = x.endedTasks_;
    this->processingTasks_ = x.processingTasks_;
  }

  return *this;
}

bratSchedulerConfig::
~bratSchedulerConfig ()
{
}

// arg
//

arg::
arg ()
: ::xml_schema::string (),
  type_ (this)
{
}

arg::
arg (const type_type& type)
: ::xml_schema::string (),
  type_ (type, this)
{
}

arg::
arg (const char* _xsd_string_base,
     const type_type& type)
: ::xml_schema::string (_xsd_string_base),
  type_ (type, this)
{
}

arg::
arg (const ::std::string& _xsd_string_base,
     const type_type& type)
: ::xml_schema::string (_xsd_string_base),
  type_ (type, this)
{
}

arg::
arg (const ::xml_schema::string& _xsd_string_base,
     const type_type& type)
: ::xml_schema::string (_xsd_string_base),
  type_ (type, this)
{
}

arg::
arg (const arg& x,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::string (x, f, c),
  type_ (x.type_, f, this)
{
}

arg::
arg (const ::xercesc::DOMElement& e,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
  type_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void arg::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      this->type_.set (type_traits::create (i, f, this));
      continue;
    }
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "type",
      "");
  }
}

arg* arg::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class arg (*this, f, c);
}

arg& arg::
operator= (const arg& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::string& > (*this) = x;
    this->type_ = x.type_;
  }

  return *this;
}

arg::
~arg ()
{
}

// at
//

at::
at ()
: ::xml_schema::string ()
{
}

at::
at (const char* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

at::
at (const ::std::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

at::
at (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

at::
at (const at& x,
    ::xml_schema::flags f,
    ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

at::
at (const ::xercesc::DOMElement& e,
    ::xml_schema::flags f,
    ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
}

at::
at (const ::xercesc::DOMAttr& a,
    ::xml_schema::flags f,
    ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
}

at::
at (const ::std::string& s,
    const ::xercesc::DOMElement* e,
    ::xml_schema::flags f,
    ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
}

at* at::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class at (*this, f, c);
}

at::
~at ()
{
}

// function
//

function::
function (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_function_convert ();
}

function::
function (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_function_convert ();
}

function::
function (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_function_convert ();
}

function* function::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class function (*this, f, c);
}

function::value function::
_xsd_function_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_function_literals_);
  const value* i (::std::lower_bound (
                    _xsd_function_indexes_,
                    _xsd_function_indexes_ + 1,
                    *this,
                    c));

  if (i == _xsd_function_indexes_ + 1 || _xsd_function_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const function::
_xsd_function_literals_[1] =
{
  "CopyFile"
};

const function::value function::
_xsd_function_indexes_[1] =
{
  ::function::CopyFile
};

// name
//

name::
name ()
: ::xml_schema::string ()
{
}

name::
name (const char* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

name::
name (const ::std::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

name::
name (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

name::
name (const name& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

name::
name (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
}

name::
name (const ::xercesc::DOMAttr& a,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
}

name::
name (const ::std::string& s,
      const ::xercesc::DOMElement* e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
}

name* name::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class name (*this, f, c);
}

name::
~name ()
{
}

// status
//

status::
status (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_status_convert ();
}

status::
status (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_status_convert ();
}

status::
status (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_status_convert ();
}

status* status::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class status (*this, f, c);
}

status::value status::
_xsd_status_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_status_literals_);
  const value* i (::std::lower_bound (
                    _xsd_status_indexes_,
                    _xsd_status_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_status_indexes_ + 3 || _xsd_status_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const status::
_xsd_status_literals_[3] =
{
  "pending",
  "processing",
  "ended"
};

const status::value status::
_xsd_status_indexes_[3] =
{
  ::status::ended,
  ::status::pending,
  ::status::processing
};

// uid
//

uid::
uid ()
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > ()
{
}

uid::
uid (const ::xml_schema::long_& _xsd_long__base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (_xsd_long__base)
{
}

uid::
uid (const uid& x,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (x, f, c)
{
}

uid::
uid (const ::xercesc::DOMElement& e,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (e, f, c)
{
}

uid::
uid (const ::xercesc::DOMAttr& a,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (a, f, c)
{
}

uid::
uid (const ::std::string& s,
     const ::xercesc::DOMElement* e,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (s, e, f, c)
{
}

uid* uid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class uid (*this, f, c);
}

uid::
~uid ()
{
}

// type
//

type::
type (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_type_convert ();
}

type::
type (const ::xercesc::DOMAttr& a,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_type_convert ();
}

type::
type (const ::std::string& s,
      const ::xercesc::DOMElement* e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_type_convert ();
}

type* type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class type (*this, f, c);
}

type::value type::
_xsd_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_type_indexes_,
                    _xsd_type_indexes_ + 8,
                    *this,
                    c));

  if (i == _xsd_type_indexes_ + 8 || _xsd_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const type::
_xsd_type_literals_[8] =
{
  "undefined",
  "integer",
  "long",
  "float",
  "double",
  "char",
  "string",
  "array of double"
};

const type::value type::
_xsd_type_indexes_[8] =
{
  ::type::array_of_double,
  ::type::char_,
  ::type::double_,
  ::type::float_,
  ::type::integer,
  ::type::long_,
  ::type::string,
  ::type::undefined
};

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::task >
task_ (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::task > (
    ::task_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::task >
task_ (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::task > (
    ::task_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::task >
task_ (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::task > (
    ::task_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::task_ (isrc, f, p);
}

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::task_ (isrc, h, f, p);
}

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::task_ (isrc, h, f, p);
}

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::task_ (isrc, f, p);
}

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::task_ (isrc, h, f, p);
}

::std::auto_ptr< ::task >
task_ (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::task_ (isrc, h, f, p);
}

::std::auto_ptr< ::task >
task_ (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::task > (
    ::task_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::task >
task_ (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::task > (
    ::task_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::task >
task_ (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::task > (
    ::task_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::task >
task_ (const ::xercesc::DOMDocument& doc,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::task > (
      ::task_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "task" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::task > r (
      ::xsd::cxx::tree::traits< ::task, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "task",
    "");
}

::std::auto_ptr< ::task >
task_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "task" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::task > r (
      ::xsd::cxx::tree::traits< ::task, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "task",
    "");
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::processingTasks > (
    ::processingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::processingTasks > (
    ::processingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::processingTasks > (
    ::processingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::processingTasks_ (isrc, f, p);
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::processingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::processingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::processingTasks_ (isrc, f, p);
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::processingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::processingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::processingTasks > (
    ::processingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::processingTasks > (
    ::processingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::processingTasks > (
    ::processingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::processingTasks > (
      ::processingTasks_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "processingTasks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::processingTasks > r (
      ::xsd::cxx::tree::traits< ::processingTasks, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "processingTasks",
    "");
}

::std::auto_ptr< ::processingTasks >
processingTasks_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "processingTasks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::processingTasks > r (
      ::xsd::cxx::tree::traits< ::processingTasks, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "processingTasks",
    "");
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::pendingTasks > (
    ::pendingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::pendingTasks > (
    ::pendingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::pendingTasks > (
    ::pendingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pendingTasks_ (isrc, f, p);
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pendingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pendingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pendingTasks_ (isrc, f, p);
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pendingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pendingTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::pendingTasks > (
    ::pendingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::pendingTasks > (
    ::pendingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::pendingTasks > (
    ::pendingTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::pendingTasks > (
      ::pendingTasks_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "pendingTasks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::pendingTasks > r (
      ::xsd::cxx::tree::traits< ::pendingTasks, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "pendingTasks",
    "");
}

::std::auto_ptr< ::pendingTasks >
pendingTasks_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "pendingTasks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::pendingTasks > r (
      ::xsd::cxx::tree::traits< ::pendingTasks, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "pendingTasks",
    "");
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::endedTasks > (
    ::endedTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::endedTasks > (
    ::endedTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::endedTasks > (
    ::endedTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::endedTasks_ (isrc, f, p);
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::endedTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::endedTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::endedTasks_ (isrc, f, p);
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::endedTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::endedTasks_ (isrc, h, f, p);
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::endedTasks > (
    ::endedTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::endedTasks > (
    ::endedTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::endedTasks > (
    ::endedTasks_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::endedTasks > (
      ::endedTasks_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "endedTasks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::endedTasks > r (
      ::xsd::cxx::tree::traits< ::endedTasks, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "endedTasks",
    "");
}

::std::auto_ptr< ::endedTasks >
endedTasks_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "endedTasks" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::endedTasks > r (
      ::xsd::cxx::tree::traits< ::endedTasks, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "endedTasks",
    "");
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::bratSchedulerConfig > (
    ::bratSchedulerConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::bratSchedulerConfig > (
    ::bratSchedulerConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::bratSchedulerConfig > (
    ::bratSchedulerConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::bratSchedulerConfig_ (isrc, f, p);
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::bratSchedulerConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::bratSchedulerConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::bratSchedulerConfig_ (isrc, f, p);
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::bratSchedulerConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::bratSchedulerConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::bratSchedulerConfig > (
    ::bratSchedulerConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::bratSchedulerConfig > (
    ::bratSchedulerConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::bratSchedulerConfig > (
    ::bratSchedulerConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::bratSchedulerConfig > (
      ::bratSchedulerConfig_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "bratSchedulerConfig" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::bratSchedulerConfig > r (
      ::xsd::cxx::tree::traits< ::bratSchedulerConfig, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "bratSchedulerConfig",
    "");
}

::std::auto_ptr< ::bratSchedulerConfig >
bratSchedulerConfig_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "bratSchedulerConfig" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::bratSchedulerConfig > r (
      ::xsd::cxx::tree::traits< ::bratSchedulerConfig, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "bratSchedulerConfig",
    "");
}

::std::auto_ptr< ::arg >
arg_ (const ::std::string& u,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::arg > (
    ::arg_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::arg >
arg_ (const ::std::string& u,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::arg > (
    ::arg_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::arg >
arg_ (const ::std::string& u,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::arg > (
    ::arg_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::arg_ (isrc, f, p);
}

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::arg_ (isrc, h, f, p);
}

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::arg_ (isrc, h, f, p);
}

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::arg_ (isrc, f, p);
}

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::arg_ (isrc, h, f, p);
}

::std::auto_ptr< ::arg >
arg_ (::std::istream& is,
      const ::std::string& sid,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::arg_ (isrc, h, f, p);
}

::std::auto_ptr< ::arg >
arg_ (::xercesc::InputSource& i,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::arg > (
    ::arg_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::arg >
arg_ (::xercesc::InputSource& i,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::arg > (
    ::arg_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::arg >
arg_ (::xercesc::InputSource& i,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::arg > (
    ::arg_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::arg >
arg_ (const ::xercesc::DOMDocument& doc,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::arg > (
      ::arg_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "arg" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::arg > r (
      ::xsd::cxx::tree::traits< ::arg, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "arg",
    "");
}

::std::auto_ptr< ::arg >
arg_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
      ::xml_schema::flags f,
      const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "arg" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::arg > r (
      ::xsd::cxx::tree::traits< ::arg, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "arg",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
task_ (::std::ostream& o,
       const ::task& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::task_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
task_ (::std::ostream& o,
       const ::task& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::task_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
task_ (::std::ostream& o,
       const ::task& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::task_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
task_ (::xercesc::XMLFormatTarget& t,
       const ::task& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::task_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
task_ (::xercesc::XMLFormatTarget& t,
       const ::task& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::task_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
task_ (::xercesc::XMLFormatTarget& t,
       const ::task& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::task_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
task_ (::xercesc::DOMDocument& d,
       const ::task& s,
       ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "task" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "task",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
task_ (const ::task& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "task",
      "",
      m, f));

  ::task_ (*d, s, f);
  return d;
}

void
processingTasks_ (::std::ostream& o,
                  const ::processingTasks& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::processingTasks_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
processingTasks_ (::std::ostream& o,
                  const ::processingTasks& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::processingTasks_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
processingTasks_ (::std::ostream& o,
                  const ::processingTasks& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::processingTasks_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
processingTasks_ (::xercesc::XMLFormatTarget& t,
                  const ::processingTasks& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::processingTasks_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
processingTasks_ (::xercesc::XMLFormatTarget& t,
                  const ::processingTasks& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::processingTasks_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
processingTasks_ (::xercesc::XMLFormatTarget& t,
                  const ::processingTasks& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::processingTasks_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
processingTasks_ (::xercesc::DOMDocument& d,
                  const ::processingTasks& s,
                  ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "processingTasks" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "processingTasks",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
processingTasks_ (const ::processingTasks& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "processingTasks",
      "",
      m, f));

  ::processingTasks_ (*d, s, f);
  return d;
}

void
pendingTasks_ (::std::ostream& o,
               const ::pendingTasks& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::pendingTasks_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
pendingTasks_ (::std::ostream& o,
               const ::pendingTasks& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::pendingTasks_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
pendingTasks_ (::std::ostream& o,
               const ::pendingTasks& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::pendingTasks_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
pendingTasks_ (::xercesc::XMLFormatTarget& t,
               const ::pendingTasks& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::pendingTasks_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
pendingTasks_ (::xercesc::XMLFormatTarget& t,
               const ::pendingTasks& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::pendingTasks_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
pendingTasks_ (::xercesc::XMLFormatTarget& t,
               const ::pendingTasks& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::pendingTasks_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
pendingTasks_ (::xercesc::DOMDocument& d,
               const ::pendingTasks& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "pendingTasks" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "pendingTasks",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
pendingTasks_ (const ::pendingTasks& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "pendingTasks",
      "",
      m, f));

  ::pendingTasks_ (*d, s, f);
  return d;
}

void
endedTasks_ (::std::ostream& o,
             const ::endedTasks& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::endedTasks_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
endedTasks_ (::std::ostream& o,
             const ::endedTasks& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::endedTasks_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
endedTasks_ (::std::ostream& o,
             const ::endedTasks& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::endedTasks_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
endedTasks_ (::xercesc::XMLFormatTarget& t,
             const ::endedTasks& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::endedTasks_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
endedTasks_ (::xercesc::XMLFormatTarget& t,
             const ::endedTasks& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::endedTasks_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
endedTasks_ (::xercesc::XMLFormatTarget& t,
             const ::endedTasks& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::endedTasks_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
endedTasks_ (::xercesc::DOMDocument& d,
             const ::endedTasks& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "endedTasks" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "endedTasks",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
endedTasks_ (const ::endedTasks& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "endedTasks",
      "",
      m, f));

  ::endedTasks_ (*d, s, f);
  return d;
}

void
bratSchedulerConfig_ (::std::ostream& o,
                      const ::bratSchedulerConfig& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::bratSchedulerConfig_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
bratSchedulerConfig_ (::std::ostream& o,
                      const ::bratSchedulerConfig& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::bratSchedulerConfig_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
bratSchedulerConfig_ (::std::ostream& o,
                      const ::bratSchedulerConfig& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::bratSchedulerConfig_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
bratSchedulerConfig_ (::xercesc::XMLFormatTarget& t,
                      const ::bratSchedulerConfig& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::bratSchedulerConfig_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
bratSchedulerConfig_ (::xercesc::XMLFormatTarget& t,
                      const ::bratSchedulerConfig& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::bratSchedulerConfig_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
bratSchedulerConfig_ (::xercesc::XMLFormatTarget& t,
                      const ::bratSchedulerConfig& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::bratSchedulerConfig_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
bratSchedulerConfig_ (::xercesc::DOMDocument& d,
                      const ::bratSchedulerConfig& s,
                      ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "bratSchedulerConfig" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "bratSchedulerConfig",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
bratSchedulerConfig_ (const ::bratSchedulerConfig& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "bratSchedulerConfig",
      "",
      m, f));

  ::bratSchedulerConfig_ (*d, s, f);
  return d;
}

void
arg_ (::std::ostream& o,
      const ::arg& s,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::arg_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
arg_ (::std::ostream& o,
      const ::arg& s,
      ::xml_schema::error_handler& h,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::arg_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
arg_ (::std::ostream& o,
      const ::arg& s,
      ::xercesc::DOMErrorHandler& h,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::arg_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
arg_ (::xercesc::XMLFormatTarget& t,
      const ::arg& s,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::arg_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
arg_ (::xercesc::XMLFormatTarget& t,
      const ::arg& s,
      ::xml_schema::error_handler& h,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::arg_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
arg_ (::xercesc::XMLFormatTarget& t,
      const ::arg& s,
      ::xercesc::DOMErrorHandler& h,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::arg_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
arg_ (::xercesc::DOMDocument& d,
      const ::arg& s,
      ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "arg" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "arg",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
arg_ (const ::arg& s,
      const ::xml_schema::namespace_infomap& m,
      ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "arg",
      "",
      m, f));

  ::arg_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const task& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // arg
  //
  for (task::arg_const_iterator
       b (i.arg ().begin ()), n (i.arg ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "arg",
        e));

    s << *b;
  }

  // task
  //
  if (i.task1 ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "task",
        e));

    s << *i.task1 ();
  }

  // at
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "at",
        e));

    a << i.at ();
  }

  // function
  //
  if (i.function ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "function",
        e));

    a << *i.function ();
  }

  // cmd
  //
  if (i.cmd ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cmd",
        e));

    a << *i.cmd ();
  }

  // logFile
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "logFile",
        e));

    a << i.logFile ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // status
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << i.status ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const processingTasks& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // task
  //
  for (processingTasks::task_const_iterator
       b (i.task ().begin ()), n (i.task ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "task",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const pendingTasks& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // task
  //
  for (pendingTasks::task_const_iterator
       b (i.task ().begin ()), n (i.task ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "task",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const endedTasks& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // task
  //
  for (endedTasks::task_const_iterator
       b (i.task ().begin ()), n (i.task ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "task",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const bratSchedulerConfig& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // pendingTasks
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "pendingTasks",
        e));

    s << i.pendingTasks ();
  }

  // endedTasks
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "endedTasks",
        e));

    s << i.endedTasks ();
  }

  // processingTasks
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "processingTasks",
        e));

    s << i.processingTasks ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const arg& i)
{
  e << static_cast< const ::xml_schema::string& > (i);

  // type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << i.type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const at& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const at& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const at& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const function& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const function& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const function& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const name& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const name& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const name& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const status& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const status& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const status& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const uid& i)
{
  e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const uid& i)
{
  a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const uid& i)
{
  l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

