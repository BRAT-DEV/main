#include "new-gui/brat/stdafx.h"


#include "new-gui/Common/QtUtils.h"

#include "DataModels/Model.h"
#include "DataModels/Workspaces/Workspace.h"
#include "DataModels/Workspaces/Display.h"

#include "GUI/DisplayWidgets/TextWidget.h"

#include "WorkspaceViewsDialog.h"



void CWorkspaceViewsDialog::CreateWidgets()
{
	static const QStringList header_labels = QStringList() << tr( "Name" ) << tr( "Type" ) << tr( "Value" );

	const std::string wname = mModel.RootWorkspace()->GetName();

	//	Create

	//	... Tree

	mViewsListWidget = new QListWidget( this );
	mViewsListWidget->setSelectionBehavior( QAbstractItemView::SelectRows );
	mViewsListWidget->setSelectionMode( QAbstractItemView::SingleSelection );
	mViewsListWidget->setSizePolicy( QSizePolicy::Expanding, QSizePolicy::MinimumExpanding );


	//	... Help

	auto help = new CTextWidget;
	help->setHelpProperties( "All views generated by the operations of workspace " + t2q( wname ), 6, Qt::AlignCenter );
    auto help_group = CreateGroupBox( ELayoutType::Grid, { help }, "", nullptr, 6, 6, 6, 6, 6 );
    help_group->setSizePolicy( QSizePolicy::Expanding, QSizePolicy::Maximum );


	//	... Buttons

	mButtonBox = new QDialogButtonBox( this );
	mButtonBox->setObjectName( QString::fromUtf8( "mButtonBox" ) );
	mButtonBox->setOrientation( Qt::Horizontal );
	mButtonBox->setStandardButtons( QDialogButtonBox::Open | QDialogButtonBox::Cancel );
    mButtonBox->button( QDialogButtonBox::Open )->setDefault( true );


    QBoxLayout *main_l =
            LayoutWidgets( Qt::Vertical,
                            {
                                mViewsListWidget,
								help_group,
                                mButtonBox

                            }, this, 6, 6, 6, 6, 6 );                       Q_UNUSED( main_l );


    setWindowTitle( "Workspace Views - " + t2q( wname ) );

    //	Wrap up dimensions

    adjustSize();
	setMinimumWidth( width() );

	Wire();
}

void CWorkspaceViewsDialog::Wire()
{
    //	Setup things

	connect( mButtonBox, SIGNAL( accepted() ), this, SLOT( accept() ) );
	connect( mButtonBox, SIGNAL( rejected() ), this, SLOT( reject() ) );

	auto displays = mModel.Workspace< CWorkspaceDisplay >()->GetDisplays();
	for ( auto const &display_entry : *displays )
	{
		CDisplay *display = dynamic_cast<CDisplay*>( display_entry.second );							assert__( display );
		auto v = display->GetOperations();
		if ( v.size() == 0 )				//old workspace ?
			continue;

		QListWidgetItem *item = new QListWidgetItem( display->GetName().c_str(), mViewsListWidget );
		std::string tip = 
			display->IsZLatLonType() ? "Type: map" : ( display->IsZYFXType() ? "Type: Z=F(X,Y)" : "Type: Y=F(X)" );
		std::string operation_names;
		for ( auto *op : v )
		{
			operation_names	+= ( "\n\t" + op->GetName() );
		}
		if ( !operation_names.empty() )
		{
			tip += ( "\nOperation:" + operation_names );
		}
		item->setToolTip( tip.c_str() );
	}
	mViewsListWidget->setCurrentRow( 0 );
}


CWorkspaceViewsDialog::CWorkspaceViewsDialog( QWidget *parent, CModel &model )
	: base_t( parent ), mModel( model )
{
	assert__( mModel.Workspace< CWorkspaceDisplay >()->GetDisplays() && mModel.Workspace< CWorkspaceDisplay >()->GetDisplays()->size() > 0 );

	CreateWidgets();
}


CWorkspaceViewsDialog::~CWorkspaceViewsDialog()
{}


//virtual 
QSize CWorkspaceViewsDialog::sizeHint() const
{
	int delta_height = base_t::sizeHint().height() - mViewsListWidget->sizeHint().height() + 4;		//+ 4: guessing borders
    QSize s( base_t::sizeHint().width(), 
		delta_height + (int)mModel.Workspace< CWorkspaceDisplay >()->GetDisplays()->size() * ( mViewsListWidget->fontMetrics().height() + 2 ) );	//+2: guessing items spacing
	return s;
}


//virtual 
void CWorkspaceViewsDialog::accept()
{
	auto *item = mViewsListWidget->currentItem();
	if ( !item )
	{
		SimpleErrorBox( "There is no selected view to open" );
		return;
	}
	std::string dname = q2a( item->text() );
	mSelectedDisplay = mModel.Workspace< CWorkspaceDisplay >()->GetDisplay( dname );

	base_t::accept();
}






///////////////////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////////////////

#include "moc_WorkspaceViewsDialog.cpp"
