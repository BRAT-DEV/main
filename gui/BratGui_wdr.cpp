//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: BratGui.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "BratGui_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "BratGui_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "wxDatePickerCtrl.h"

#include "Dictionary.h"
#include "Process.h"
#include "brathl.h"
#include "BratGui.h"
#include "Validators.h"
#include "LabeledTextCtrl.h"
#include "CheckListBox.h"
#include "TimeCtrl.h"
#include "DatasetTreeCtrl.h"
#include "FieldsTreeCtrl.h"
#include "OperationTreeCtrl.h"

CFloatValidator floatValidator;
CFloatExtendedValidator floatExtendedValidator;
CDigitValidator digitValidator;
CDateValidator dateValidator;
wxTextValidator textValidator;

int32_t charwidth, charheight;


// Implement window functions

wxSizer *MainNotebook( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxNotebook *item2 = new wxNotebook( parent, ID_MAINNOTEBOOK, wxDefaultPosition, wxDefaultSize, 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    item0->Add( item1, 1, wxGROW|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glb_DatasetlistSizer;
wxSizer *DatasetListPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Dataset Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->SetFont( wxFont( 10, wxSWISS, wxNORMAL, wxBOLD ) );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxComboBox *item3 = new wxComboBox( parent, ID_DSNAMES, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs3, wxCB_DROPDOWN|wxCB_SORT );
    item3->SetToolTip( _("Name of the dataset. (enter a new name for renaming)") );
    item1->Add( item3, 1, wxFIXED_MINSIZE|wxALIGN_CENTER|wxALL, 5 );

    item1->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_DSNEW, _("New"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_DSDELETE, _("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxFIXED_MINSIZE|wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Files in dataset"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item8 = new wxBoxSizer( wxVERTICAL );
    glb_DatasetlistSizer = item8;

    wxString *strs9 = (wxString*) NULL;
    wxListBox *item9 = new wxListBox( parent, ID_DSFILELIST, wxDefaultPosition, wxSize(-1,180), 0, strs9, wxLB_SINGLE|wxLB_HSCROLL|wxLB_NEEDED_SB );
    item9->SetToolTip( _("Components of the dataset (product files)") );
    item8->Add( item9, 3, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item10 = new wxStaticText( parent, ID_FILEDESC_LABEL, _("File description"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_FILEDESC, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY|wxVSCROLL|wxHSCROLL );
    item11->SetToolTip( _("Description of the selected file.") );
    item8->Add( item11, 1, wxGROW|wxALL, 0 );

    item7->Add( item8, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxVERTICAL );

    wxButton *item13 = new wxButton( parent, ID_DSUP, _("Up"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->SetToolTip( _("Change file position (one step uppper).") );
    item12->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_DSDOWN, _("Down"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->SetToolTip( _("Change file position (one step lower).") );
    item12->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item12->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item15 = new wxButton( parent, ID_DSSORT, _("Sort"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->SetToolTip( _("Sort the list (toggle between ascending/descending).") );
    item12->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, ID_DSREMOVE, _("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->SetToolTip( _("Remove the selected file from the list.") );
    item12->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, ID_DSCLEAR, _("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->SetToolTip( _("Clear the list.") );
    item12->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item7->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item7, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item19 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item21 = new wxButton( parent, ID_DSADDFILES, _("Add Files..."), wxDefaultPosition, wxDefaultSize, 0 );
    item21->SetToolTip( _("Open a file dialog box for adding files to the dataset.") );
    item20->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item22 = new wxButton( parent, ID_DSADDDIR, _("Add Dir..."), wxDefaultPosition, wxDefaultSize, 0 );
    item22->SetToolTip( _("Open a directory dialog box for adding all files from a directory to the dataset.") );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 0 );

    item19->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item24 = new wxCheckBox( parent, ID_DSAPPLYCRIT, _("Apply selection criteria"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( 10, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxVERTICAL );

    wxButton *item26 = new wxButton( parent, ID_DSDEFINECRIT, _("Define selection criteria"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxGROW|wxALL, 0 );

    wxButton *item27 = new wxButton( parent, ID_DSSHOWREPORT, _("Show selection report"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item18->Add( item25, 0, wxALIGN_CENTER|wxALL, 0 );

    item18->Add( 10, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, ID_DSCHECK, _("Check Files"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->SetToolTip( _("Check files- All files in the dataset must correspond to the same product.") );
    item18->Add( item28, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item0->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *DatasetSplitPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    CDatasetPanel *item1 = new CDatasetPanel( parent, ID_DATASETSPLITTER, wxDefaultPosition, wxDefaultSize, wxSP_BORDER|wxSP_LIVE_UPDATE|wxSP_3D|wxSUNKEN_BORDER|wxCLIP_CHILDREN );
    item1->SetMinimumPaneSize( 150 );
    item0->Add( item1, 1, wxGROW|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *DatasetDescCtrl( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_PRODUCT_LABEL, _("Product"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 1, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    CDictionaryList *item4 = new CDictionaryList( parent, ID_DICTLIST, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item4->SetToolTip( _("Fields contained in the selected product file.") );
    item3->Add( item4, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item0->Add( item3, 2, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Fields description"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_FIELDDESC, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY|wxVSCROLL|wxHSCROLL );
    item8->SetToolTip( _("Description of the selected fields.") );
    item6->Add( item8, 1, wxGROW|wxALL, 5 );

    item5->Add( item6, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item0->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glb_WorkspaceDlgSizer;
wxSizer *brathlGuiImportOptionsSizer;
wxSizer *glb_FormulaListToImportSizer;
wxSizer *WorkspaceDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    glb_WorkspaceDlgSizer = item0;

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_WKS_NAME_STATIC, _("Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_WKS_NAME, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Location"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_WKS_LOC, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_WKS_BROWSE, _("Browse..."), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item9 = new wxStaticBox( parent, -1, _("Import options") );
    wxStaticBoxSizer *item8 = new wxStaticBoxSizer( item9, wxHORIZONTAL );
    brathlGuiImportOptionsSizer = item8;

    wxCheckBox *item10 = new wxCheckBox( parent, ID_IMPORT_DATASET, _("Datasets"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item8->Add( 10, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item11 = new wxCheckBox( parent, ID_IMPORT_FORMULAS, _("Formulas"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxToggleButton *item12 = new wxToggleButton( parent, ID_IMPORT_FORMULAS_SELECT, _("Select formulas"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    item8->Add( 10, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item13 = new wxCheckBox( parent, ID_IMPORT_OPERATIONS, _("Operations"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item8->Add( 10, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item14 = new wxCheckBox( parent, ID_IMPORT_VIEWS, _("Views"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );
    glb_FormulaListToImportSizer = item15;

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
CCheckListBox *item16 = new CCheckListBox(parent, ID_IMPORT_FORMULAS_LIST);
    wxASSERT( item16 );
    item15->Add( item16, 1, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item17 = new wxBoxSizer( wxVERTICAL );

    wxButton *item18 = new wxButton( parent, ID_IMPORT_FORMULAS_SELECT_ALL, _("Select all"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item19 = new wxButton( parent, ID_IMPORT_FORMULAS_DESELECT_ALL, _("Deselect all"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item21 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->SetDefault();
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item22 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *FormulaDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_FORMULA_NAME, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->SetToolTip( _("Set a name for the formula") );
    item1->Add( item3, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Value"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_FORMULA_VALUE, wxT(""), wxDefaultPosition, wxSize(400,100), wxTE_MULTILINE|wxTE_READONLY );
    item5->SetForegroundColour( *wxBLUE );
    item5->SetToolTip( _("Value of the formula") );
    item1->Add( item5, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Unit"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_FORMULA_UNIT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item7->SetToolTip( _("Set a unit for the formula") );
    item1->Add( item7, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Title"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_FORMULA_TITLE, wxT(""), wxDefaultPosition, wxSize(300,-1), wxTE_MULTILINE );
    item9->SetToolTip( _("Set a title for the formula") );
    item1->Add( item9, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, _("Comment"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_FORMULA_COMMENT, wxT(""), wxDefaultPosition, wxSize(400,50), wxTE_MULTILINE );
    item11->SetToolTip( _("Set a comment for the formula (optional)") );
    item1->Add( item11, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item13 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->SetDefault();
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glb_FormulaGlobalSizer;
wxSizer *glb_FormulaOptFillInSizer;
wxSizer *glb_FormulaOptIntervalSizer;
wxSizer *FormulaOptionDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    glb_FormulaGlobalSizer = item0;

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_FORMULAOPT_NAME, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item3->SetToolTip( _("Name for the formula") );
    item1->Add( item3, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Title"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_FORMULAOPT_TITLE, wxT(""), wxDefaultPosition, wxSize(300,-1), wxTE_MULTILINE );
    item5->SetToolTip( _("Set a title for the formula") );
    item1->Add( item5, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item7 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item6 = new wxStaticBoxSizer( item7, wxHORIZONTAL );
    glb_FormulaOptFillInSizer = item6;

    wxBoxSizer *item8 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item9 = new wxCheckBox( parent, ID_FORMULAOPT_FILL_IN, _("Fill in between tracks"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->SetToolTip( _("Set/Unset fill in betweens tracks. If set, check which filter to apply to the data (Loess means Loes smooth and Loess extrapolate)") );
    item8->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs10[] = 
    {
        _("Loess smooth"), 
        _("Loess extrapolate"), 
        _("Loess")
    };
    wxRadioBox *item10 = new wxRadioBox( parent, ID_FORMULAOPT_FILTER, _("Filter to apply"), wxDefaultPosition, wxDefaultSize, 3, strs10, 1, wxRA_SPECIFY_ROWS );
    item10->SetToolTip( _("How to filter the data (Loess means Loes smooth and Loess extrapolate)") );
    item8->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("If you set filter, don't forget to set 'Loess cut-ff' on X and Y fields."), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticBox *item13 = new wxStaticBox( parent, -1, _("Text") );
    wxStaticBoxSizer *item12 = new wxStaticBoxSizer( item13, wxHORIZONTAL );
    glb_FormulaOptIntervalSizer = item12;

    wxBoxSizer *item14 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item16 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item17 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_MIN, "Min.", "", floatValidator, "%-#.5g", wxSize(15*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item17 );
    item16->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

        CLabeledTextCtrl *item18 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_MAX, "Max.", "", floatValidator, "%-#.5g", wxSize(15*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item18 );
    item16->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item15->Add( item16, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxButton *item19 = new wxButton( parent, ID_FORMULAOPT_HELP_MIN_MAX, _("?"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

        CLabeledTextCtrl *item20 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_LOESSCUT, "Loess cut-off", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item20 );
    item14->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item12->Add( item14, 2, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item12->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item23 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_STEP, "Step", "",floatExtendedValidator, "%-#.6g", wxDefaultSize, wxTE_PROCESS_ENTER);
    wxASSERT( item23 );
    item22->Add( item23, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxButton *item24 = new wxButton( parent, ID_FORMULAOPT_HELP_STEP, _("?"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item21->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

        CLabeledTextCtrl *item25 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_INTERVAL, "Number of intervals", "", digitValidator, "%d", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER|wxTE_READONLY);
    wxASSERT( item25 );
    item21->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item26 = new wxStaticText( parent, ID_FORMULAOPT_INTERVAL_WARNING, 
        _("Interval was round up or down \n"
          "to the nearest integer value"),
        wxDefaultPosition, wxDefaultSize, 0 );
    item26->SetFont( wxFont( 9, wxSWISS, wxNORMAL, wxBOLD ) );
    item21->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item12->Add( item21, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item28 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->SetDefault();
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item29 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *LogPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxPanel *item1 = new wxPanel( parent, ID_LOGPANEL, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *LogInfoPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Current tasks") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxHORIZONTAL );

    CTaskList *item3 = new CTaskList( parent, ID_TASKLIST, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item3->SetToolTip( _("Fields contained in the selected product file.") );
    item1->Add( item3, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxButton *item4 = new wxButton( parent, ID_TASK_KILL, _("Kill"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_LOG_MESS, wxT(""), wxDefaultPosition, wxSize(80,40), wxTE_MULTILINE|wxTE_READONLY );
    item0->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_LOG_CLEAR, _("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glb_OpInfoPanel2Sizer;
wxSizer *glb_OpAllDataExprSizer;
wxSizer *glb_OpPanelRightPane;
wxSizer *glb_OpPanelResolutionAndFilterSizer;
wxSizer *glb_OpXResolutionSizer;
wxSizer *glb_OpYResolutionSizer;
wxSizer *OperationInfoPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    glb_OpInfoPanel2Sizer = item0;

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item2 = new wxButton( parent, ID_OPINSERTEXPR, _("Insert expression"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->SetToolTip( _("Insert a new empty expression into X, Y, or data node") );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, ID_OPINSERTFIELD, _("Insert field"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->SetToolTip( _("Insert the selected field into the expression or as a new expression") );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_OPINSERTFCT, _("Insert function ..."), wxDefaultPosition, wxDefaultSize, 0 );
    item4->SetToolTip( _("Choose a function from a dialog box and insert it into the expression") );
    item1->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_OPINSERTFORMULA, _("Insert formula..."), wxDefaultPosition, wxDefaultSize, 0 );
    item5->SetToolTip( _("Choose a 'user' formula from a dialog box and insert it into the expression") );
    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_OPSAVEASFORMULA, _("Save as formula..."), wxDefaultPosition, wxDefaultSize, 0 );
    item6->SetToolTip( _("Save expression as 'user' formula") );
    item1->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_OPINSERTALGORITHM, _("Insert algorithm..."), wxDefaultPosition, wxDefaultSize, 0 );
    item7->SetToolTip( _("Choose an algorithm  from a dialog box and insert it into the expression") );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, ID_OPDELETEEXPR, _("Delete expression"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->SetToolTip( _("Delete the selected expression") );
    item1->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );
    glb_OpAllDataExprSizer = item9;

    wxBoxSizer *item10 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_OPERATIONTREECTRLLABEL, _("text"), wxDefaultPosition, wxSize(-1,15), wxST_NO_AUTORESIZE );
    item12->SetForegroundColour( *wxBLUE );
    item11->Add( item12, 2, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBitmapButton *item13 = new wxBitmapButton( parent, ID_OPCHANGERECORD, ButtonBitmapsFunc( 6 ), wxDefaultPosition, wxDefaultSize );
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item10->Add( item11, 2, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Data expressions:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item14, 0, wxALIGN_CENTER_VERTICAL, 5 );

    COperationTreeCtrl *item15 = new COperationTreeCtrl( parent, ID_OPERATIONTREECTRL, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxTR_EDIT_LABELS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER|wxTR_HIDE_ROOT );
    item10->Add( item15, 15, wxFIXED_MINSIZE|wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item9->Add( item10, 2, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxVERTICAL );
    glb_OpPanelRightPane = item16;

    wxFlexGridSizer *item17 = new wxFlexGridSizer( 2, 1, 0 );
    item17->AddGrowableCol( 1 );
    item17->AddGrowableRow( 1 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, _("Unit"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_OPUNIT, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item20->SetToolTip( _("Unit of the data") );
    item19->Add( item20, 1, wxFIXED_MINSIZE|wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs22 = (wxString*) NULL;
    wxComboBox *item22 = new wxComboBox( parent, ID_OPTYPE, wxT(""), wxDefaultPosition, wxDefaultSize, 0, strs22, wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT );
    item22->SetToolTip( _("Type of the data (ie. X, Y, Time, Latitude, Longitude ...)") );
    item19->Add( item22, 1, wxALIGN_CENTER|wxALL, 5 );

    item17->Add( item19, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticText *item23 = new wxStaticText( parent, ID_OPXVALUE, _("Expression"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item23, 1, wxALIGN_RIGHT|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, ID_OPTEXTFORM, wxT(""), wxDefaultPosition, wxSize(80,200), wxTE_MULTILINE );
    item24->SetBackgroundColour( *wxLIGHT_GREY );
    item24->SetFont( wxFont( 11, wxSWISS, wxNORMAL, wxBOLD ) );
    item17->Add( item24, 1, wxGROW|wxALL, 0 );

    item16->Add( item17, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, _("Data Computation"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs27 = (wxString*) NULL;
    wxComboBox *item27 = new wxComboBox( parent, ID_OP_DATA_MODE, wxT(""), wxDefaultPosition, wxDefaultSize, 0, strs27, wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT );
    item27->SetToolTip( _("Set how data are stored/computed") );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 0 );

    item25->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item28 = new wxButton( parent, ID_OPCHECKDATAF, _("Check syntax"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->SetToolTip( _("Check the syntax of the expression") );
    item25->Add( item28, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item29 = new wxButton( parent, ID_OPEXPRINFO, _("Show info"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item29, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item30 = new wxButton( parent, ID_OPALIASINFO, _("Show aliases"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item30, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item31 = new wxButton( parent, ID_OPTITLE, _("Title/Comment"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->SetToolTip( _("Add a title and/or a comment to the expression") );
    item25->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item16->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item33 = new wxStaticBox( parent, -1, _("Resolution and filter information") );
    wxStaticBoxSizer *item32 = new wxStaticBoxSizer( item33, wxHORIZONTAL );
    glb_OpPanelResolutionAndFilterSizer = item32;

    wxBoxSizer *item34 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item36 = new wxStaticBox( parent, -1, _(" X  Resolution ") );
    wxStaticBoxSizer *item35 = new wxStaticBoxSizer( item36, wxHORIZONTAL );
    glb_OpXResolutionSizer = item35;

    wxStaticText *item37 = new wxStaticText( parent, ID_OP_XRESOLUTIONLABEL, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item37, 1, wxALIGN_CENTER|wxALL, 0 );

    item34->Add( item35, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item39 = new wxStaticBox( parent, -1, _("Y  Resolution ") );
    wxStaticBoxSizer *item38 = new wxStaticBoxSizer( item39, wxHORIZONTAL );
    glb_OpYResolutionSizer = item38;

    wxStaticText *item40 = new wxStaticText( parent, ID_OP_YRESOLUTIONLABEL, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item40, 1, wxALIGN_CENTER|wxALL, 0 );

    item34->Add( item38, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item41 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item42 = new wxStaticText( parent, ID_OP_FILTERLABEL, wxT(""), wxDefaultPosition, wxSize(20,20), 0 );
    item41->Add( item42, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item43 = new wxButton( parent, ID_OPRESOLUTION, _("Set Resolution / Filter..."), wxDefaultPosition, wxDefaultSize, 0 );
    item43->SetToolTip( _("Set X/Y resolution and filters") );
    item41->Add( item43, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item34->Add( item41, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item32->Add( item34, 1, wxALIGN_CENTER|wxALL, 0 );

    item16->Add( item32, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 10 );

    item9->Add( item16, 5, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item0->Add( item9, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glb_OpPanel2Sizer;
wxSizer *OperationPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );
    glb_OpPanel2Sizer = item0;

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxSplitterWindow *item2 = new wxSplitterWindow( parent, ID_OPERATIONSPLITTER, wxDefaultPosition, wxDefaultSize, wxSP_BORDER|wxSP_LIVE_UPDATE|wxSP_3D|wxSUNKEN_BORDER|wxCLIP_CHILDREN );
    item2->SetMinimumPaneSize( 150 );
    item1->Add( item2, 1, wxGROW|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *DataStruct( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Datasets"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    CDatasetTreeCtrl *item4 = new CDatasetTreeCtrl( parent, ID_DATASETTREECTRL, wxDefaultPosition, wxSize(-1,100), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER|wxTR_HIDE_ROOT );
    item4->SetToolTip( _("Dataset list") );
    item2->Add( item4, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Fields"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    CFieldsTreeCtrl *item6 = new CFieldsTreeCtrl( parent, ID_FIELDSTREECTRL, wxDefaultPosition, wxSize(-1,160), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER|wxTR_HIDE_ROOT );
    item2->Add( item6, 3, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *FunctionsDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    item1->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Select a category:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString strs4[] = 
    {
        _("ChoiceItem")
    };
    wxChoice *item4 = new wxChoice( parent, ID_FUNCTION_CAT, wxDefaultPosition, wxSize(200,-1), 1, strs4, 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    item5->Add( 12, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Select a function:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALL, 5 );

    wxString *strs8 = (wxString*) NULL;
    wxListBox *item8 = new wxListBox( parent, ID_FUNCTION_LIST, wxDefaultPosition, wxSize(250,100), 0, strs8, wxLB_SINGLE );
    item6->Add( item8, 1, wxGROW|wxALL, 0 );

    item5->Add( item6, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item5->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    item9->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_FUNCTION_COMMENT, wxT(""), wxDefaultPosition, wxSize(80,40), wxTE_MULTILINE|wxTE_READONLY );
    item10->Add( item11, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item9->Add( item10, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item9->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item13 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->SetDefault();
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *FormulasDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    item1->Add( 12, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Select a formula:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxListBox *item4 = new wxListBox( parent, ID_FORMULA_LIST, wxDefaultPosition, wxSize(400,100), 0, strs4, wxLB_SINGLE );
    item2->Add( item4, 1, wxGROW|wxALL, 0 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Unit:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item7 = new wxStaticText( parent, ID_FORMULA_UNIT, _("text"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->SetFont( wxFont( 10, wxSWISS, wxNORMAL, wxBOLD ) );
    item5->Add( item7, 3, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, ID_FORMULA_REMOVE, _("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item2->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    item9->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Content:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_FORMULA_VALUE, wxT(""), wxDefaultPosition, wxSize(80,40), wxTE_MULTILINE|wxTE_READONLY );
    item10->Add( item12, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item9->Add( item10, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item9->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item14 = new wxCheckBox( parent, ID_FORMULA_ALIAS, _("As alias"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->SetValue( TRUE );
    item13->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item15 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->SetDefault();
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glb_FormulaResolutionSizer;
wxSizer *glb_FormulaOptFilterSizer;
wxSizer *glb_FormulaOptXIntervalSizer;
wxSizer *glb_FormulaOptYIntervalSizer;
wxSizer *ResolutionDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    glb_FormulaResolutionSizer = item0;

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Expression Name") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxHORIZONTAL );
    glb_FormulaOptFilterSizer = item1;

    item1->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item3 = new wxBoxSizer( wxVERTICAL );

    wxString strs4[] = 
    {
        _("None"), 
        _("Loess smooth"), 
        _("Loess extrapolate"), 
        _("Loess")
    };
    wxRadioBox *item4 = new wxRadioBox( parent, ID_FORMULAOPT_FILTER, _(" Filter to apply (Fill in between tracks) "), wxDefaultPosition, wxDefaultSize, 4, strs4, 1, wxRA_SPECIFY_ROWS );
    item4->SetToolTip( _("Set/Unset fill in betweens tracks and how to filter the data (Loess means Loes smooth and Loess extrapolate).") );
    item3->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("If you set filter, don't forget to set 'Loess cut-off' on X and Y below."), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item7 = new wxStaticBox( parent, -1, _(" X Resolution") );
    wxStaticBoxSizer *item6 = new wxStaticBoxSizer( item7, wxHORIZONTAL );
    glb_FormulaOptXIntervalSizer = item6;

    item6->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item8 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item10 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item11 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_XMIN, "Min.", "", floatValidator, "%-#.5g", wxSize(15*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item11 );
    item10->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

        CLabeledTextCtrl *item12 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_XMAX, "Max.", "", floatValidator, "%-#.5g", wxSize(15*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item12 );
    item10->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, ID_FORMULAOPT_XGETMINMAX, _("Get X Min/Max"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->SetToolTip( _("Get the min. and max. values from the dataset") );
    item10->Add( item13, 0, wxALIGN_CENTER, 0 );

    item9->Add( item10, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_FORMULAOPT_HELP_X_MIN_MAX, _("?"), wxDefaultPosition, wxSize(20,-1), 0 );
    item9->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item8->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

        CLabeledTextCtrl *item15 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_XLOESSCUT, "Loess cut-off", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item15 );
    item8->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item6->Add( item8, 2, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item6->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item16 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item18 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_XSTEP, "Step", "",floatExtendedValidator, "%-#.6g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item18 );
    item17->Add( item18, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item19 = new wxButton( parent, ID_FORMULAOPT_HELP_X_STEP, _("?"), wxDefaultPosition, wxSize(20,-1), 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item16->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item21 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_XINTERVAL, "Number of intervals\n(based on unit)", "", digitValidator, "%d", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER|wxTE_READONLY);
    wxASSERT( item21 );
    item20->Add( item21, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item16->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_FORMULAOPT_INTERVAL_X_WARNING, 
        _("Interval was round up or down \n"
          "to the nearest integer value"),
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item16->Add( item22, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item6->Add( item16, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item6->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item24 = new wxStaticBox( parent, -1, _(" Y Resolution") );
    wxStaticBoxSizer *item23 = new wxStaticBoxSizer( item24, wxHORIZONTAL );
    glb_FormulaOptYIntervalSizer = item23;

    item23->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item25 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item27 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item28 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_YMIN, "Min.", "", floatValidator, "%-#.5g", wxSize(15*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item28 );
    item27->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

        CLabeledTextCtrl *item29 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_YMAX, "Max.", "", floatValidator, "%-#.5g", wxSize(15*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item29 );
    item27->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item30 = new wxButton( parent, ID_FORMULAOPT_YGETMINMAX, _("Get Y Min/Max"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->SetToolTip( _("Get the min. and max. values from the dataset") );
    item27->Add( item30, 0, wxALIGN_CENTER, 5 );

    item26->Add( item27, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxButton *item31 = new wxButton( parent, ID_FORMULAOPT_HELP_Y_MIN_MAX, _("?"), wxDefaultPosition, wxSize(20,-1), 0 );
    item26->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

        CLabeledTextCtrl *item32 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_YLOESSCUT, "Loess cut-off", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item32 );
    item25->Add( item32, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item23->Add( item25, 2, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item23->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item33 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item35 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_YSTEP, "Step", "",floatExtendedValidator, "%-#.6g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item35 );
    item34->Add( item35, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item36 = new wxButton( parent, ID_FORMULAOPT_HELP_Y_STEP, _("?"), wxDefaultPosition, wxSize(20,-1), 0 );
    item34->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    item33->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item37 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item38 = new CLabeledTextCtrl(parent, NULL, ID_FORMULAOPT_YINTERVAL, "Number of intervals\n(based on unit)", "", digitValidator, "%d", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER|wxTE_READONLY);
    wxASSERT( item38 );
    item37->Add( item38, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item33->Add( item37, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item39 = new wxStaticText( parent, ID_FORMULAOPT_INTERVAL_Y_WARNING, 
        _("Interval was round up or down \n"
          "to the nearest integer value"),
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item33->Add( item39, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item23->Add( item33, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item23->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item40 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item41 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->SetDefault();
    item40->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item42 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glb_ExportOptionsSizer;
wxSizer *glb_ExportGeoTiffSizer;
wxSizer *ExportDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Output file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_EXPORTOUTPUTFILE, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_EXPORT_BROWSE, _("Browse..."), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );
    glb_ExportOptionsSizer = item5;

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxString strs7[] = 
    {
        _("Ascii"), 
        _("NetCdf"), 
        _("GeoTiff")
    };
    wxRadioBox *item7 = new wxRadioBox( parent, ID_EXPORTFORMAT, _("Export format"), wxDefaultPosition, wxDefaultSize, 3, strs7, 1, wxRA_SPECIFY_ROWS );
    item6->Add( item7, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item9 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item10 = new wxCheckBox( parent, ID_DATE_AS_PERIOD, _("Deliver date as period (duration)"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->SetToolTip( _("Deleiver date as a duration if check, otherwise deliver date as 'yyyy-mm-dd hh:mm:ss' format") );
    item9->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item11 = new wxCheckBox( parent, ID_EXPAND_ARRAY, _("Expand arrays so far as possible"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->SetToolTip( _("Expand arrays so far as possible, i.e. if all export array fields have the same dimension") );
    item9->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item12 = new wxCheckBox( parent, ID_EXECAGAIN, _("Execute operation before export"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item13 = new wxCheckBox( parent, ID_EXPORT_NO_DATA_COMPUTATION, _("Only dump expressions (no data computation)"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item14 = new CLabeledTextCtrl(parent, NULL, ID_EXPORT_ASCII_NUMBER_PRECISION, "Ascii number precision:", "", digitValidator, "", wxSize(4*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item14 );
    item9->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item8->Add( item9, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item6->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item5->Add( item6, 2, wxALIGN_CENTER_HORIZONTAL, 10 );

    wxBoxSizer *item15 = new wxBoxSizer( wxVERTICAL );
    glb_ExportGeoTiffSizer = item15;

    wxCheckBox *item16 = new wxCheckBox( parent, ID_EXPORT_CREATE_KML_FILE, _("Create GoogleEarth KML file"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item18 = new wxStaticText( parent, ID_EXPORT_COLOR_TABLE_LABEL, _("Color table:"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxString strs19[] = 
    {
        _("Aerosol"), 
        _("Blackbody"), 
        _("BlackToWhite"), 
        _("Cloud"), 
        _("Ozone"), 
        _("GreenToRed"), 
        _("Rainbow"), 
        _("RedToGreen"), 
        _("WhiteToBlack")
    };
    wxComboBox *item19 = new wxComboBox( parent, ID_EXPORT_COLOR_TABLE, wxT(""), wxDefaultPosition, wxDefaultSize, 9, strs19, wxCB_DROPDOWN );
    item17->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item15->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item21 = new wxStaticBox( parent, -1, _("Color Range") );
    wxStaticBoxSizer *item20 = new wxStaticBoxSizer( item21, wxVERTICAL );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item23 = new CLabeledTextCtrl(parent, NULL, ID_EXPORT_COLORRANGE_MIN, "min:", "", floatValidator, "%-#.5g", wxSize(5*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item23 );
    item22->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item24 = new CLabeledTextCtrl(parent, NULL, ID_EXPORT_COLORRANGE_MAX, "max:", "", floatValidator, "%-#.5g", wxSize(5*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item24 );
    item22->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item25 = new wxButton( parent, ID_EXPORT_CALC_COLOR_RANGE, _("Calculate Min/Max"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item20, 0, wxALIGN_CENTER|wxALL, 0 );

    item5->Add( item15, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxTOP|wxBOTTOM, 5 );

    wxBoxSizer *item26 = new wxBoxSizer( wxVERTICAL );

    wxButton *item27 = new wxButton( parent, ID_EXPORT_DELAY_EXECUTION, _("Delay execution"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, wxID_OK, _("Execute"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->SetDefault();
    item26->Add( item28, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item29 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item29, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item5->Add( item26, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *DisplayPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxPanel *item1 = new wxPanel( parent, ID_DISPLAYPANEL, wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glbDisplayPanelSizer;
wxSizer *glbDisplayGeneralPropsSizer;
wxSizer *glbDisplayZoomSizer;
wxSizer *glbDisplayZoomGeo;
wxSizer *glbDisplayZoomXY;
wxSizer *glbDisplaySelected;
wxSizer *glbDisplayFieldPropsAll;
wxSizer *glbDisplayFieldPropsAll2;
wxSizer *glbDisplayFieldProps1;
wxSizer *glbDisplayFieldPropsZFXY1;
wxSizer *glbDisplayFieldPropsZFXY2;
wxSizer *glbDisplayFieldPropsYFX1;
wxSizer *DisplayInfoPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    glbDisplayPanelSizer = item0;

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("View name"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->SetFont( wxFont( 10, wxSWISS, wxNORMAL, wxBOLD ) );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxComboBox *item3 = new wxComboBox( parent, ID_DISP_NAMES, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs3, wxCB_DROPDOWN|wxCB_SORT );
    item3->SetToolTip( _("Name of the display (enter a new name for renaming)") );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_DISPEXECUTE, _("Execute"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->SetFont( wxFont( 10, wxSWISS, wxNORMAL, wxBOLD ) );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_DISPNEW, _("New"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_DISPDELETE, _("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( 20, 20, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item8 = new wxStaticBox( parent, -1, _(" General Plot Properties ") );
    item8->SetFont( wxFont( 9, wxSWISS, wxNORMAL, wxBOLD ) );
    wxStaticBoxSizer *item7 = new wxStaticBoxSizer( item8, wxHORIZONTAL );
    glbDisplayGeneralPropsSizer = item7;

    wxBoxSizer *item9 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("Title"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_DISP_TITLE, wxT(""), wxDefaultPosition, wxSize(300,-1), wxTE_MULTILINE );
    item14->SetToolTip( _("Set a title to the display") );
    item12->Add( item14, 1, wxALIGN_CENTER|wxALL, 5 );

    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item16 = new wxCheckBox( parent, ID_DISP_WITH_ANIMATION, _("With animation"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->SetToolTip( _("For world plot. When several same fields (same names) are in input, this parameter indicates if fields are displayed in different frames to be animated in the plot (animation = true) or if field are stacked (overlaid).") );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Projection"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs18 = (wxString*) NULL;
    wxComboBox *item18 = new wxComboBox( parent, ID_DISP_PROJ, wxT(""), wxDefaultPosition, wxSize(150,-1), 0, strs18, wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT );
    item18->SetToolTip( _("Projection to use for mapping the world globe.") );
    item15->Add( item18, 0, wxALIGN_CENTER|wxALL, 0 );

    item11->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );
    glbDisplayZoomSizer = item19;

    item19->Add( 5, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBox *item21 = new wxStaticBox( parent, -1, _("Zoom") );
    wxStaticBoxSizer *item20 = new wxStaticBoxSizer( item21, wxHORIZONTAL );
    glbDisplayZoomGeo = item20;

    wxBoxSizer *item22 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item23 = new CLabeledTextCtrl(parent, NULL, ID_DISPZOOM_LON_WEST, "West:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item23 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item24 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item25 = new CLabeledTextCtrl(parent, NULL, ID_DISPZOOM_LAT_NORTH, "North:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item25 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item26 = new CLabeledTextCtrl(parent, NULL, ID_DISPZOOM_LAT_SOUTH, "South:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item26 );
    item24->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    item20->Add( item24, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item27 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item28 = new CLabeledTextCtrl(parent, NULL, ID_DISPZOOM_LON_EAST, "East:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item28 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item20->Add( item27, 0, wxALIGN_CENTER|wxALL, 0 );

    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticBox *item30 = new wxStaticBox( parent, -1, _("Zoom") );
    wxStaticBoxSizer *item29 = new wxStaticBoxSizer( item30, wxHORIZONTAL );
    glbDisplayZoomXY = item29;

    wxBoxSizer *item31 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item32 = new CLabeledTextCtrl(parent, NULL, ID_DISP_XMIN, "X Min.", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item32 );
    item31->Add( item32, 1, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item33 = new CLabeledTextCtrl(parent, NULL, ID_DISP_XMAX, "X Max.", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item33 );
    item31->Add( item33, 1, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( item31, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item34 = new wxBoxSizer( wxVERTICAL );

        CLabeledTextCtrl *item35 = new CLabeledTextCtrl(parent, NULL, ID_DISP_YMIN, "Y Min.", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item35 );
    item34->Add( item35, 1, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item36 = new CLabeledTextCtrl(parent, NULL, ID_DISP_YMAX, "Y Max.", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item36 );
    item34->Add( item36, 1, wxALIGN_CENTER|wxALL, 5 );

    item29->Add( item34, 0, wxALIGN_CENTER|wxALL, 0 );

    item19->Add( item29, 0, wxALIGN_CENTER|wxALL, 0 );

    item10->Add( item19, 0, wxALIGN_CENTER|wxALL, 0 );

    item9->Add( item10, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item7->Add( item9, 1, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item38 = new wxStaticBox( parent, -1, _(" Data ") );
    item38->SetFont( wxFont( 9, wxSWISS, wxNORMAL, wxBOLD ) );
    wxStaticBoxSizer *item37 = new wxStaticBoxSizer( item38, wxHORIZONTAL );

    wxStaticBox *item40 = new wxStaticBox( parent, -1, _("Available") );
    item40->SetFont( wxFont( 9, wxSWISS, wxNORMAL, wxBOLD ) );
    wxStaticBoxSizer *item39 = new wxStaticBoxSizer( item40, wxVERTICAL );

    CDisplayDataTreeCtrl *item41 = new CDisplayDataTreeCtrl( parent, ID_DISPAVAILTREECTRL, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER|wxTR_HIDE_ROOT );
    item39->Add( item41, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item37->Add( item39, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item42 = new wxBoxSizer( wxVERTICAL );

    wxButton *item43 = new wxButton( parent, ID_DISP_REFRESH, _("Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
    item43->SetToolTip( _("Refresh available data list ") );
    item42->Add( item43, 0, wxALIGN_CENTER|wxALL, 0 );

    item42->Add( 30, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item44 = new wxButton( parent, ID_DISP_ADDFIELD, _("=>"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->SetToolTip( _("Add the selected field to the 'data formula'") );
    item42->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item45 = new wxButton( parent, ID_DISP_REMOVEFIELD, _("<="), wxDefaultPosition, wxDefaultSize, 0 );
    item45->SetToolTip( _("Remove the selected field from the 'select formula'") );
    item42->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    item37->Add( item42, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticBox *item47 = new wxStaticBox( parent, -1, _(" Selected ") );
    item47->SetFont( wxFont( 9, wxSWISS, wxNORMAL, wxBOLD ) );
    wxStaticBoxSizer *item46 = new wxStaticBoxSizer( item47, wxVERTICAL );
    glbDisplaySelected = item46;

    wxBoxSizer *item48 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item49 = new wxCheckBox( parent, ID_DISPGROUPFIELDS, _("Group expressions in the same plot"), wxDefaultPosition, wxDefaultSize, 0 );
    item49->SetToolTip( _("If check, all expressions are displayed in the same plots, otherwise each expression is displayed in a specific plot (one filed by plot)") );
    item48->Add( item49, 0, wxALIGN_CENTER|wxALL, 0 );

    item48->Add( 20, 20, 1, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item50 = new wxStaticText( parent, ID_TEXT, _("View type:"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    item48->Add( item50, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item51 = new wxStaticText( parent, ID_DISP_TYPE, _("undefined"), wxDefaultPosition, wxDefaultSize, 0 );
    item48->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    item46->Add( item48, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 15 );

    CDictionaryDisplayList *item52 = new CDictionaryDisplayList( parent, ID_DISP_DATA_SEL, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item52->SetToolTip( _("Selected data to be displayed. Select a field to remove it and click '<=' button, or type 'Del' key") );
    item46->Add( item52, 1, wxGROW|wxALL, 0 );

    wxStaticBox *item54 = new wxStaticBox( parent, -1, _(" Display Expression Properties ") );
    item54->SetFont( wxFont( 9, wxSWISS, wxNORMAL, wxBOLD ) );
    wxStaticBoxSizer *item53 = new wxStaticBoxSizer( item54, wxHORIZONTAL );
    glbDisplayFieldPropsAll = item53;

    wxBoxSizer *item55 = new wxBoxSizer( wxVERTICAL );
    glbDisplayFieldPropsAll2 = item55;

    wxBoxSizer *item56 = new wxBoxSizer( wxHORIZONTAL );
    glbDisplayFieldProps1 = item56;

    wxStaticText *item57 = new wxStaticText( parent, ID_TEXT, _("Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item56->Add( item57, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item58 = new wxTextCtrl( parent, ID_DISP_FIELD_NAME, wxT(""), wxDefaultPosition, wxSize(120,-1), 0 );
    item58->SetToolTip( _("Name to be displayed on the plot") );
    item56->Add( item58, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item59 = new wxBoxSizer( wxHORIZONTAL );
    glbDisplayFieldPropsZFXY1 = item59;

        CLabeledTextCtrl *item60 = new CLabeledTextCtrl(parent, NULL, ID_DISP_MIN, "Min.", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item60 );
    item59->Add( item60, 1, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item61 = new CLabeledTextCtrl(parent, NULL, ID_DISP_MAX, "Max.", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item61 );
    item59->Add( item61, 1, wxALIGN_CENTER|wxALL, 5 );

    item56->Add( item59, 1, wxALIGN_CENTER|wxALL, 0 );

    item55->Add( item56, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item62 = new wxBoxSizer( wxHORIZONTAL );
    glbDisplayFieldPropsZFXY2 = item62;

    wxBoxSizer *item63 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item64 = new wxCheckBox( parent, ID_DISP_NORTH_COMPONENT, _("North Component"), wxDefaultPosition, wxDefaultSize, 0 );
    item64->SetToolTip( _("INdicates the North component of a vector plot") );
    item63->Add( item64, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item65 = new wxCheckBox( parent, ID_DISP_EAST_COMPONENT, _("East Component"), wxDefaultPosition, wxDefaultSize, 0 );
    item65->SetToolTip( _("Indicates the East Component in a vector plot") );
    item63->Add( item65, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item62->Add( item63, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item66 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item67 = new wxCheckBox( parent, ID_DISP_SOLID_COLOR, _("Solid color"), wxDefaultPosition, wxDefaultSize, 0 );
    item67->SetToolTip( _("Indicates if color layer of th field is shown or not.") );
    item66->Add( item67, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item68 = new wxCheckBox( parent, ID_DISP_CONTOUR, _("Contour"), wxDefaultPosition, wxDefaultSize, 0 );
    item68->SetToolTip( _("Indicates if the contour layer of the field is shown or not") );
    item66->Add( item68, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item62->Add( item66, 0, wxALIGN_CENTER|wxALL, 0 );

    item62->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item69 = new wxStaticText( parent, ID_DISP_PALETTE_LABEL, _("Color table"), wxDefaultPosition, wxDefaultSize, 0 );
    item62->Add( item69, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs70 = (wxString*) NULL;
    wxComboBox *item70 = new wxComboBox( parent, ID_DISP_PALETTE, wxT(""), wxDefaultPosition, wxSize(120,-1), 0, strs70, wxCB_DROPDOWN|wxCB_SORT );
    item70->SetToolTip( _("Color palette to use for mapping the world globe.") );
    item62->Add( item70, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item71 = new wxButton( parent, ID_DISP_PAL_BROWSE, _("Browse..."), wxDefaultPosition, wxDefaultSize, 0 );
    item62->Add( item71, 0, wxALIGN_CENTER|wxALL, 0 );

    item62->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item72 = new wxCheckBox( parent, ID_DISP_INVERT_XYAXES, _("Invert X/Y axes"), wxDefaultPosition, wxDefaultSize, 0 );
    item72->SetToolTip( _("Invert X and Y axes on display") );
    item62->Add( item72, 0, wxALIGN_CENTER|wxALL, 5 );

    item55->Add( item62, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item73 = new wxBoxSizer( wxHORIZONTAL );
    glbDisplayFieldPropsYFX1 = item73;

    wxStaticText *item74 = new wxStaticText( parent, ID_DISP_XAXIS_LABEL, _("X axis"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    item73->Add( item74, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs75[] = 
    {
        wxT("")
    };
    wxChoice *item75 = new wxChoice( parent, ID_DISP_XAXIS, wxDefaultPosition, wxSize(120,-1), 1, strs75, 0 );
    item73->Add( item75, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item76 = new wxStaticText( parent, ID_DISP_XAXIS_TEXT_LABEL, _("X label"), wxDefaultPosition, wxDefaultSize, 0 );
    item73->Add( item76, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item77 = new wxTextCtrl( parent, ID_DISP_XAXIS_TEXT, wxT(""), wxDefaultPosition, wxSize(200,-1), 0 );
    item73->Add( item77, 0, wxALIGN_CENTER|wxALL, 0 );

    item55->Add( item73, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item53->Add( item55, 1, wxALIGN_CENTER|wxALL, 0 );

    item46->Add( item53, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item37->Add( item46, 2, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item37, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *RecordDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    item1->Add( 12, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Select a record:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxListBox *item4 = new wxListBox( parent, ID_RECORD_LIST, wxDefaultPosition, wxSize(200,100), 0, strs4, wxLB_SINGLE );
    item2->Add( item4, 1, wxGROW|wxALL, 0 );

    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item6 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->SetDefault();
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *OperationPanelHeader( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Operation Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->SetFont( wxFont( 10, wxSWISS, wxNORMAL, wxBOLD ) );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxComboBox *item5 = new wxComboBox( parent, ID_OPNAMES, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs5, wxCB_DROPDOWN|wxCB_SORT );
    item5->SetToolTip( _("Name of the operation. (enter a new name for renaming)") );
    item3->Add( item5, 1, wxALIGN_CENTER|wxALL, 0 );

    item3->Add( 1, 15, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item3, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item2, 1, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item8 = new wxButton( parent, ID_OPEXECUTE, _("Execute"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->SetFont( wxFont( 10, wxSWISS, wxNORMAL, wxBOLD ) );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    item7->Add( 2, 15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, ID_OPNEW, _("New"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item10 = new wxButton( parent, ID_OPDUP, _("Duplicate"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item11 = new wxButton( parent, ID_OPDELETE, _("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item11, 0, wxALIGN_CENTER|wxALL, 0 );

    item7->Add( 2, 15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, ID_OPEXPORT, _("Export..."), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item13 = new wxButton( parent, ID_OPEXPORTASCIIEDIT, _("Edit Ascii export"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item13, 0, wxALIGN_CENTER|wxALL, 0 );

    item7->Add( 2, 15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_OPSHOWSTATS, _("Compute statistics"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item14, 0, wxALIGN_CENTER|wxALL, 0 );

    item7->Add( 2, 15, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, ID_OPDELAY, _("Delay execution"), wxDefaultPosition, wxSize(150,-1), 0 );
    item16->SetFont( wxFont( 10, wxSWISS, wxNORMAL, wxBOLD ) );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 0 );

    wxButton *item17 = new wxButton( parent, ID_LAUNCH_SCHEDULER, _("Launch Scheduler"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glbSelectionCriteriaDlgSizer;
wxSizer *glbCritSizer;
wxSizer *glbCritDateSizer;
wxSizer *glbCritLatLonSizer;
wxSizer *glbCritCycleFromToSizer;
wxSizer *glbCritPassFromToSizer;
wxSizer *glbCritPassListSizer;
wxSizer *SelectionCriteriaDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    glbSelectionCriteriaDlgSizer = item0;

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Select a product category") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxHORIZONTAL );

    wxString strs3[] = 
    {
        _("ListItem")
    };
    wxListBox *item3 = new wxListBox( parent, ID_CRIT_PRODUCT_LIST, wxDefaultPosition, wxSize(300,120), 1, strs3, wxLB_SINGLE|wxLB_HSCROLL|wxLB_NEEDED_SB );
    item1->Add( item3, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item5 = new wxStaticBox( parent, -1, _("Selection criteria") );
    wxStaticBoxSizer *item4 = new wxStaticBoxSizer( item5, wxVERTICAL );
    glbCritSizer = item4;

    wxStaticBox *item7 = new wxStaticBox( parent, -1, _("Date/time") );
    wxStaticBoxSizer *item6 = new wxStaticBoxSizer( item7, wxHORIZONTAL );
    glbCritDateSizer = item6;

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item8 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_DATE_MIN, "Min.:", "", dateValidator, "", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item8 );
    item6->Add( item8, 1, wxALIGN_CENTER|wxALL, 5 );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item9 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_DATE_MAX, "Max.:", "", dateValidator, "", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item9 );
    item6->Add( item9, 1, wxALIGN_CENTER|wxALL, 5 );

    item4->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item11 = new wxStaticBox( parent, -1, _("Latitude/longitude") );
    wxStaticBoxSizer *item10 = new wxStaticBoxSizer( item11, wxHORIZONTAL );
    glbCritLatLonSizer = item10;

    wxBoxSizer *item12 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item13 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_LON_WEST, "West:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item13 );
    item12->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item14 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item15 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_LAT_NORTH, "North:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item15 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item16 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_LAT_SOUTH, "South:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item16 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item10->Add( item14, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item17 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item18 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_LON_EAST, "East:", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item18 );
    item17->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item10->Add( item17, 0, wxALIGN_CENTER|wxALL, 0 );

    item4->Add( item10, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item20 = new wxStaticBox( parent, -1, _("Cycle criteria") );
    wxStaticBoxSizer *item19 = new wxStaticBoxSizer( item20, wxHORIZONTAL );
    glbCritCycleFromToSizer = item19;

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item21 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_CYCLE_FROM, "From:", "", digitValidator, "", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item21 );
    item19->Add( item21, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item22 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_CYCLE_TO, "To:", "", digitValidator, "", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item22 );
    item19->Add( item22, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item24 = new wxStaticBox( parent, -1, _("Pass criteria (as number)") );
    wxStaticBoxSizer *item23 = new wxStaticBoxSizer( item24, wxHORIZONTAL );
    glbCritPassFromToSizer = item23;

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item25 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_PASS_FROM, "From:", "", digitValidator, "", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item25 );
    item23->Add( item25, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item26 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_PASS_TO, "To:", "", digitValidator, "", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item26 );
    item23->Add( item26, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item4->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item28 = new wxStaticBox( parent, -1, _("Pass criteria (as std::string)") );
    wxStaticBoxSizer *item27 = new wxStaticBoxSizer( item28, wxHORIZONTAL );
    glbCritPassListSizer = item27;

    wxBoxSizer *item29 = new wxBoxSizer( wxVERTICAL );

    CBratGuiApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item30 = new CLabeledTextCtrl(parent, NULL, ID_CRIT_PASS_LIST, "List of passes:", "", textValidator, "", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item30 );
    item29->Add( item30, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT, _("(Comma separated values)"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item27->Add( item29, 1, wxALIGN_CENTER|wxALL, 0 );

    item4->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item32 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item33 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->SetDefault();
    item32->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item34 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item32, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glbExprInfoGridSizerH;
wxSizer *glbExprInfoGridSizerV;
wxSizer *ExpressionInfoDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, 
        _("The base unit (SI unit) of each field is used when doing expression calculation.\n"
          "The list below shows the original unit (field unit)  and the unit used for calculation (SI unit).\n"
          "If you set constant values in the expression, you have to fit the constant values to the SI unit.\n"
          ""),
        wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 1, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item0->Add( item1, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );
    glbExprInfoGridSizerH = item3;

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );
    glbExprInfoGridSizerV = item4;

    wxGrid *item5 = new wxGrid( parent, ID_EXPRINFO_GRID, wxDefaultPosition, wxDefaultSize, wxWANTS_CHARS );
    item4->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item3->Add( item4, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item3, 5, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_EXPRINFO_RESULT_UNIT, _("text"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item9 = new wxButton( parent, wxID_OK, _("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *UnitFieldDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Field name "), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_UNITFIELD_FIELD, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Actual unit "), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_UNITFIELD_ACTUALUNIT, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item4->Add( item6, 1, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("New unit "), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_UNITFIELD_NEWUNIT, wxT(""), wxDefaultPosition, wxSize(250,-1), 0 );
    item7->Add( item9, 1, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item7, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item11 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->SetDefault();
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glbAlgoInputParamSizerV;
wxSizer *glbAlgoInputParamSizerH;
wxSizer *AlgorithmDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    item1->Add( 12, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Select an algorithm:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxListBox *item4 = new wxListBox( parent, ID_ALGO_LIST, wxDefaultPosition, wxSize(550,100), 0, strs4, wxLB_SINGLE|wxLB_SORT );
    item2->Add( item4, 1, wxGROW|wxALL, 0 );

    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item1->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    item5->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Description:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_ALGO_DESCR, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY );
    item6->Add( item8, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item5->Add( item6, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item5->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    item9->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxVERTICAL );
    glbAlgoInputParamSizerV = item10;

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Input parameters:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );
    glbAlgoInputParamSizerH = item12;

    wxGrid *item13 = new wxGrid( parent, ID_ALGO_INPUT_PARAM_GRID, wxDefaultPosition, wxDefaultSize, wxWANTS_CHARS );
    item12->Add( item13, 1, wxALL, 5 );

    item10->Add( item12, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item9->Add( item10, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item9->Add( 8, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 2, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    item0->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, 
        _("As in whole BRAT, computations are done using SI units.\n"
          "Conversions are possible when the unit is defined (basically, in the data fields, e.g. cm can be converted in m).\n"
          "Note that, however, they are not possible when using expressions where the unit might be different from SI\n"
          "(e.g. cm instead of m), while not formally defined.\n"
          ""),
        wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Output unit:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_ALGO_OUTPUT_UNIT, wxT(""), wxDefaultPosition, wxSize(200,-1), wxTE_READONLY );
    item16->Add( item18, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item20 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->SetDefault();
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item21 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *DelayDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Choose the execution date"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 0 );

    wxDateTime dt = wxDateTime::Now();
wxDatePickerCtrl*item3 = new wxDatePickerCtrl(parent, ID_DATE_PICKER, 
dt, wxDefaultPosition, wxDefaultSize, wxDP_DEFAULT | wxDP_SHOWCENTURY | wxDP_DROPDOWN);
    wxASSERT( item3 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("The date format depends on  the current system locale format"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER, 0 );

    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item6 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Choose the execution time"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    CTimeCtrl*item9 = new CTimeCtrl(parent, ID_TIME_PICKER, "", false, false, wxDefaultPosition, wxDefaultSize);
    wxASSERT( item9 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("The time format is hour:minute (e.g. 22:45)"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item12 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Label the task (optional)"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_TASK_NAME, wxT(""), wxDefaultPosition, wxSize(150,-1), 0 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item16 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item18 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->SetDefault();
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item19 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *glbAliasParamSizerH;
wxSizer *glbAliasParamSizerV;
wxSizer *AliasInfoDlg( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_ALIASINFO_HEADER, _("The list below shows the available aliases for the product"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );
    glbAliasParamSizerH = item3;

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );
    glbAliasParamSizerV = item4;

    wxGrid *item5 = new wxGrid( parent, ID_ALIASINFO_GRID, wxDefaultPosition, wxDefaultSize, wxWANTS_CHARS );
    item4->Add( item5, 1, wxGROW|wxALL, 5 );

    item3->Add( item4, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item3, 10, wxGROW|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_ALIASINFO_FOOTER, _("(*) Check the alias you want to add to the current expression. Selected aliases will be added when the window is closed."), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item9 = new wxButton( parent, wxID_OK, _("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MainMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    wxMenuItem *item2 = new wxMenuItem( item1, ID_WSNEW, _("&New...\tCtrl-N"), _("Creates a new workspace") );
    item2->SetBitmap( ButtonBitmapsFunc( 0 ) );
    item1->Append( item2 );
    wxMenuItem *item3 = new wxMenuItem( item1, ID_WSOPEN, _("&Open...\tCtrl-O"), _("Open an existing workspace") );
    item3->SetBitmap( ButtonBitmapsFunc( 2 ) );
    item1->Append( item3 );
    wxMenuItem *item4 = new wxMenuItem( item1, ID_WSSAVE, _("&Save\tCtrl-S"), _("Save the current workspace") );
    item4->SetBitmap( ButtonBitmapsFunc( 4 ) );
    item1->Append( item4 );
    item1->Append( ID_WSIMPORT, _("&Import..."), _("Import the content of a workspace into the current workspace") );
    item1->Append( ID_WSRENAME, _("&Rename..."), _("Rename the current workspace") );
    wxMenuItem *item5 = new wxMenuItem( item1, ID_WSDELETE, _("&Delete..."), _("Delete the current workspace") );
    item5->SetBitmap( ButtonBitmapsFunc( 1 ) );
    item1->Append( item5 );
    item1->AppendSeparator();
    
    wxMenu* item6 = new wxMenu;
    item1->Append( ID_MENU_FILE_RECENT, _("&Recent &Workspaces"), item6 );

    item1->AppendSeparator();
    wxMenuItem *item7 = new wxMenuItem( item1, wxID_EXIT, _("&Quit\tCtrl-Q"), _("Exit the application") );
    item7->SetBitmap( ButtonBitmapsFunc( 3 ) );
    item1->Append( item7 );
    item0->Append( item1, _("&Workspace") );
    
    wxMenu* item8 = new wxMenu;
    wxMenuItem *item9 = new wxMenuItem( item8, ID_DSNEW, _("&New"), _("Create a new dataset") );
    item9->SetBitmap( ButtonBitmapsFunc( 0 ) );
    item8->Append( item9 );
    wxMenuItem *item10 = new wxMenuItem( item8, ID_DSDELETE, _("&Delete"), _("Delete the current operation") );
    item10->SetBitmap( ButtonBitmapsFunc( 1 ) );
    item8->Append( item10 );
    item0->Append( item8, _("&Datasets") );
    
    wxMenu* item11 = new wxMenu;
    wxMenuItem *item12 = new wxMenuItem( item11, ID_OPNEW, _("&New"), _("Create a new operation") );
    item12->SetBitmap( ButtonBitmapsFunc( 0 ) );
    item11->Append( item12 );
    wxMenuItem *item13 = new wxMenuItem( item11, ID_OPDELETE, _("&Delete"), _("Delete the current operation") );
    item13->SetBitmap( ButtonBitmapsFunc( 1 ) );
    item11->Append( item13 );
    wxMenuItem *item14 = new wxMenuItem( item11, ID_OPDUPLICATE, _("D&uplicate"), _("Duplicate the current operation") );
    item14->SetBitmap( ButtonBitmapsFunc( 5 ) );
    item11->Append( item14 );
    item0->Append( item11, _("&Operations") );
    
    wxMenu* item15 = new wxMenu;
    wxMenuItem *item16 = new wxMenuItem( item15, ID_VINEW, _("&New"), _("Create a new view for data display") );
    item16->SetBitmap( ButtonBitmapsFunc( 0 ) );
    item15->Append( item16 );
    wxMenuItem *item17 = new wxMenuItem( item15, ID_VIDELETE, _("&Delete"), _("Delete the current view") );
    item17->SetBitmap( ButtonBitmapsFunc( 1 ) );
    item15->Append( item17 );
    item0->Append( item15, _("&Views") );
    
    wxMenu* item18 = new wxMenu;
    item18->Append( wxID_ABOUT, _("About"), wxT("") );
    item18->AppendSeparator();
    item18->Append( ID_HELP_USER_MANUEL, _("&User's manual"), _("Open the user's manual") );
    item0->Append( item18, _("&Help") );
    
    return item0;
}

wxMenuBar *PopupMenuFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu( _("Menu for fields tree") );
    item1->Append( ID_ASXMENU, _("Set as &X"), _("Set field as X") );
    item1->Append( ID_ASYMENU, _("Set as &Y"), _("Set field as Y") );
    item1->Append( ID_ASDATAMENU, _("Set as &Data"), _("Add field as data") );
    item1->Append( ID_ASSELECTMENU, _("Insert into  Selection &criteria"), _("Insert field into selection criteria") );
    item1->AppendSeparator();
    wxMenuItem *item2 = new wxMenuItem( item1, ID_FIELDSSORTMENU, _("Sort &Ascending"), _("Sort branch in ascending order") );
    item2->SetBitmap( BitmapsList( 1 ) );
    item1->Append( item2 );
    wxMenuItem *item3 = new wxMenuItem( item1, ID_FIELDSSORTREVMENU, _("Sort &Descending"), _("Sort branch in ascending order") );
    item3->SetBitmap( BitmapsList( 0 ) );
    item1->Append( item3 );
    item1->AppendSeparator();
    item1->Append( ID_FIELD_ATTR_CHANGE_UNIT, _("Change &unit"), _("Allow to change the unit of this field (only for netcdf variable attributes)") );
    item0->Append( item1, _("Menu for fields tree") );
    
    wxMenu* item4 = new wxMenu( _("Menu for operation tree") );
    item4->Append( ID_INSERTEXPRMENU, _("Insert &empty expression"), _("Insert a new empty expression into X, Y, or data node") );
    item4->Append( ID_INSERTFIELDMENU, _("Insert '%s' f&ield"), _("Insert the selected field into the expression") );
    item4->Append( ID_INSERTFCTMENU, _("Insert &function..."), _("Choose a function from a dialog box and insert it into the expression") );
    item4->Append( ID_INSERTFORMULAMENU, _("Insert f&ormula..."), _("Choose a 'user' formula from a dialog box and insert it into the expression") );
    item4->AppendSeparator();
    item4->Append( ID_SAVEASFORMULAMENU, _("&Save as formula..."), _("Save expression as 'user' formula") );
    item4->AppendSeparator();
    item4->Append( ID_DELETEEXPRMENU, _("&Delete expression"), _("Delete the selected expression") );
    item4->Append( ID_RENAMEEXPRMENU, _("&Rename expression"), _("Edit the selected expression name") );
    item4->AppendSeparator();
    wxMenuItem *item5 = new wxMenuItem( item4, ID_OPSORTMENU, _("Sort &Ascending"), _("Sort branch in ascending order") );
    item5->SetBitmap( BitmapsList( 1 ) );
    item4->Append( item5 );
    wxMenuItem *item6 = new wxMenuItem( item4, ID_OPSORTREVMENU, _("Sort &Descending"), _("Sort branch in ascending order") );
    item6->SetBitmap( BitmapsList( 0 ) );
    item4->Append( item6 );
    item0->Append( item4, _("Menu for operation tree") );
    
    wxMenu* item7 = new wxMenu( _("Menu for display tree") );
    item7->Append( ID_DISPADDTOSEL, _("Add to &selected"), wxT("") );
    item7->AppendSeparator();
    item7->Append( ID_DISPEXPANDMENU, _("&Expand all children"), _("Expand all children of the tree view") );
    item7->Append( ID_DISPCOLLAPSEMENU, _("&Collapse all children"), _("Collapse all children of the tree view") );
    item7->AppendSeparator();
    wxMenuItem *item8 = new wxMenuItem( item7, ID_DISPSORTMENU, _("Sort &Ascending"), _("Sort branch in ascending order") );
    item8->SetBitmap( BitmapsList( 1 ) );
    item7->Append( item8 );
    wxMenuItem *item9 = new wxMenuItem( item7, ID_DISPSORTREVMENU, _("Sort &Descending"), _("Sort branch in ascending order") );
    item9->SetBitmap( BitmapsList( 0 ) );
    item7->Append( item9 );
    item0->Append( item7, _("Menu for display tree") );
    
    return item0;
}

// Implement toolbar functions

void MainToolBarFunc( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID_TOOL, _("New"), wxBitmap( 16, 15, -1 ), wxNullBitmap, wxITEM_NORMAL, _("Create a new item") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap ButtonBitmapsFunc( size_t index )
{
    if (index == 0)
    {
        static const unsigned char data[] = 
        {
            236,233,216,236,233,216,236,233,216,142,169,188,90,137,166,107,152,184,101,145,174,101,145,174,83,
            141,179,69,129,170,58,116,156,142,169,188,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,142,169,188,195,221,241,195,221,241,182,213,238,165,204,234,151,196,231,
            133,187,226,101,145,174,114,168,210,95,155,200,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,69,129,170,69,129,170,69,129,170,69,129,170,195,221,241,182,213,238,165,204,234,151,196,
            231,101,145,174,253,254,254,151,196,231,107,152,184,236,233,216,236,233,216,236,233,216,236,233,216,
            69,129,170,172,233,91,172,233,91,69,129,170,195,221,241,195,221,241,182,213,238,165,204,234,101,
            145,174,253,254,254,253,254,254,151,196,231,107,152,184,236,233,216,69,129,170,69,129,170,69,129,
            170,172,233,91,172,233,91,69,129,170,69,129,170,69,129,170,195,221,241,182,213,238,101,145,174,
            101,145,174,107,152,184,101,145,174,83,141,179,236,233,216,69,129,170,172,233,91,172,233,91,172,
            233,91,172,233,91,172,233,91,172,233,91,69,129,170,209,229,245,195,221,241,182,213,238,165,204,
            234,151,196,231,133,187,226,83,141,179,236,233,216,69,129,170,172,233,91,172,233,91,172,233,91,
            172,233,91,172,233,91,172,233,91,69,129,170,218,234,247,209,229,245,195,221,241,182,213,238,165,
            204,234,151,196,231,83,141,179,236,233,216,69,129,170,69,129,170,69,129,170,172,233,91,172,233,
            91,69,129,170,69,129,170,69,129,170,226,239,248,218,234,247,209,229,245,195,221,241,182,213,238,
            165,204,234,101,145,174,236,233,216,236,233,216,236,233,216,69,129,170,172,233,91,172,233,91,69,
            129,170,245,249,253,236,244,251,236,244,251,226,239,248,218,234,247,209,229,245,195,221,241,182,213,
            238,101,145,174,236,233,216,236,233,216,236,233,216,69,129,170,69,129,170,69,129,170,69,129,170,
            253,254,254,245,249,253,236,244,251,236,244,251,226,239,248,218,234,247,209,229,245,195,221,241,107,
            152,184,236,233,216,236,233,216,236,233,216,236,233,216,142,169,188,253,254,254,253,254,254,245,249,
            253,245,249,253,245,249,253,236,244,251,236,244,251,226,239,248,218,234,247,209,229,245,116,155,180,
            236,233,216,236,233,216,236,233,216,236,233,216,142,169,188,253,254,254,253,254,254,253,254,254,253,
            254,254,245,249,253,245,249,253,236,244,251,236,244,251,226,239,248,218,234,247,116,155,180,236,233,
            216,236,233,216,236,233,216,236,233,216,142,169,188,253,254,254,253,254,254,253,254,254,253,254,254,
            253,254,254,245,249,253,245,249,253,236,244,251,236,244,251,226,239,248,131,156,181,236,233,216,236,
            233,216,236,233,216,236,233,216,142,169,188,253,254,254,253,254,254,253,254,254,253,254,254,253,254,
            254,253,254,254,245,249,253,245,249,253,236,244,251,236,244,251,133,167,188,236,233,216,236,233,216,
            236,233,216,236,233,216,142,169,188,142,169,188,142,169,188,142,169,188,142,169,188,142,169,188,142,
            169,188,142,169,188,142,169,188,142,169,188,142,169,188,142,169,188,236,233,216
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 236, 233, 216);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 16 1",
        "  c None",
        "a c #5478B4",
        "b c #9AA7BC",
        "c c #5C7DB4",
        "d c #758EB7",
        "e c #A2ACBC",
        "f c #6986B6",
        "g c #8A9CBA",
        "h c #8598B9",
        "i c #4A72B2",
        "j c #92A1BA",
        "k c #ABB2BE",
        "m c #6F8AB7",
        "n c #B5B9BF",
        "o c #3E69B1",
        "p c #6483B5",
        /* pixels */
        "                ",
        "    nhk      bb ",
        "    moin    foc ",
        "    gooh  naoak ",
        "     ioi naoan  ",
        "     hoohaoan   ",
        "     niooofn    ",
        "      doop      ",
        "     doood      ",
        "   ncoipoon     ",
        "  kaoakboog     ",
        " jioan nooi     ",
        "goof    pooe    ",
        "dig     eicn    ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        static const unsigned char data[] = 
        {
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,55,100,133,55,100,133,55,100,133,55,100,133,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,33,85,121,33,
            85,121,33,85,121,33,85,121,33,85,121,236,233,216,55,100,133,223,240,208,223,240,208,55,100,
            133,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,33,85,121,141,160,185,
            141,160,185,141,160,185,141,160,185,70,114,145,202,210,220,55,100,133,202,226,170,223,240,208,55,
            100,133,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,33,85,121,141,160,185,141,160,
            185,141,160,185,141,160,185,127,153,180,113,139,167,101,131,157,55,100,133,182,215,145,223,240,208,
            33,85,121,33,85,121,33,85,121,236,233,216,236,233,216,33,85,121,141,160,185,141,160,185,141,
            160,185,141,160,185,141,160,185,141,160,185,141,160,185,55,100,133,182,215,145,223,240,208,33,85,
            121,180,196,211,33,85,121,236,233,216,236,233,216,33,85,121,141,160,185,33,85,121,33,85,121,
            33,85,121,33,85,121,55,100,133,55,100,133,55,100,133,173,214,104,223,240,208,33,85,121,33,
            85,121,33,85,121,33,85,121,77,116,146,33,85,121,141,160,185,33,85,121,179,191,209,187,196,
            214,194,203,219,55,100,133,154,234,83,154,234,83,154,234,83,154,234,83,154,234,83,223,240,208,
            33,85,121,250,252,254,77,116,146,33,85,121,127,151,176,33,85,121,168,182,202,179,191,209,187,
            196,214,194,203,219,55,100,133,154,234,83,154,234,83,154,234,83,223,240,208,33,85,121,245,246,
            247,180,196,211,77,116,146,33,85,121,33,85,121,131,156,181,155,172,194,168,182,202,179,191,209,
            187,196,214,187,196,214,55,100,133,154,234,83,223,240,208,33,85,121,234,237,243,238,241,243,77,
            116,146,236,233,216,33,85,121,33,85,121,141,160,185,148,165,189,155,172,194,168,182,202,179,191,
            209,187,196,214,187,196,214,55,100,133,33,85,121,220,226,234,228,233,237,234,237,243,77,116,146,
            236,233,216,33,85,121,89,123,154,127,151,176,141,160,185,148,165,189,155,172,194,168,182,202,179,
            191,209,187,196,214,187,196,214,202,214,225,209,217,229,220,226,234,190,202,217,77,116,146,236,233,
            216,33,85,121,101,131,157,122,144,172,127,151,176,141,160,185,148,165,189,155,172,194,168,182,202,
            179,191,209,187,196,214,194,203,219,202,214,225,209,217,229,77,116,146,236,233,216,236,233,216,48,
            95,129,33,85,121,33,85,121,33,85,121,33,85,121,33,85,121,33,85,121,33,85,121,33,85,
            121,33,85,121,33,85,121,33,85,121,33,85,121,77,116,146,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 236, 233, 216);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 3)
    {
        static const unsigned char data[] = 
        {
            236,233,216,33,85,121,33,85,121,48,95,129,48,95,129,48,95,129,48,95,129,48,95,129,48,
            95,129,48,95,129,48,95,129,48,95,129,48,95,129,236,233,216,236,233,216,236,233,216,236,233,
            216,48,95,129,228,234,239,84,120,151,55,100,133,48,95,129,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,48,95,129,236,233,216,236,233,216,236,233,216,236,233,216,48,
            95,129,222,229,235,214,224,230,208,219,226,130,158,180,55,100,133,68,106,140,0,0,0,0,0,
            0,0,0,0,0,0,0,48,95,129,236,233,216,236,233,216,236,233,216,236,233,216,48,95,129,
            214,224,230,208,219,226,200,213,222,200,213,222,180,197,210,180,197,210,48,95,129,0,0,0,0,
            0,0,0,0,0,48,95,129,236,233,216,236,233,216,236,233,216,236,233,216,48,95,129,207,218,
            226,200,213,222,192,207,217,187,202,214,180,197,210,174,192,206,48,95,129,0,0,0,0,0,0,
            0,0,0,48,95,129,236,233,216,236,233,216,236,233,216,236,233,216,48,95,129,200,213,222,192,
            207,217,187,202,214,180,197,210,174,192,206,170,189,203,48,95,129,0,0,0,48,95,129,48,95,
            129,48,95,129,236,233,216,236,233,216,236,233,216,236,233,216,48,95,129,187,202,214,187,202,214,
            180,197,210,174,192,206,165,185,200,162,183,198,48,95,129,0,0,0,48,95,129,154,234,83,48,
            95,129,236,233,216,236,233,216,236,233,216,236,233,216,48,95,129,187,202,214,180,197,210,174,192,
            206,152,33,6,152,33,6,156,178,194,48,95,129,55,100,133,55,100,133,154,234,83,154,234,83,
            48,95,129,236,233,216,236,233,216,236,233,216,48,95,129,180,197,210,174,192,206,165,185,200,152,
            33,6,152,33,6,146,170,189,48,95,129,154,234,83,154,234,83,154,234,83,154,234,83,154,234,
            83,48,95,129,236,233,216,236,233,216,48,95,129,170,189,203,165,185,200,156,178,194,156,178,194,
            146,170,189,138,165,184,48,95,129,154,234,83,154,234,83,154,234,83,154,234,83,154,234,83,154,
            234,83,48,95,129,236,233,216,55,100,133,165,185,200,156,178,194,152,175,192,146,170,189,138,165,
            184,132,160,180,48,95,129,154,234,83,154,234,83,154,234,83,154,234,83,154,234,83,48,95,129,
            236,233,216,236,233,216,33,85,121,156,178,194,146,170,189,146,170,189,138,165,184,132,160,180,125,
            154,176,48,95,129,48,95,129,48,95,129,154,234,83,154,234,83,48,95,129,236,233,216,236,233,
            216,236,233,216,55,100,133,55,100,133,84,120,151,138,165,184,130,158,180,125,154,176,125,154,176,
            48,95,129,236,233,216,48,95,129,154,234,83,48,95,129,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,84,120,151,48,95,129,48,95,129,84,120,151,115,147,170,48,95,
            129,236,233,216,48,95,129,48,95,129,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,48,95,129,48,95,129,68,106,140,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216
        };
        wxImage image( 16, 15, (unsigned char*)data, TRUE );
        image.SetMaskColour( 236, 233, 216);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 20 1",
        "  c None",
        "a c #FFFFFF",
        "b c #D5D6D8",
        "c c #446A8C",
        "d c #CAD2DC",
        "e c #C0C7D1",
        "f c #5F666D",
        "g c #A5B0BA",
        "h c #65839D",
        "i c #DCE2EA",
        "j c #C3C5C8",
        "k c #E1E6EE",
        "l c #C6CCD3",
        "n c #305F81",
        "o c #D4DCE3",
        "p c #B7BFC7",
        "q c #1B4467",
        "r c #BCBDBE",
        "s c #7A90AC",
        "t c #5D7C93",
        /* pixels */
        "fffffffffffffff ",
        "fqhaaaaaaaaatqf ",
        "fsharrrrrrratsf ",
        "fshaaaaaaaaatsf ",
        "fsharrrrrrratsf ",
        "fshaaaaaaaaatsf ",
        "fsstttttttttssf ",
        "fsssssssssssssf ",
        "fsssnnnnnnnnssf ",
        "fssngggploiansf ",
        "fssngqcclbkansf ",
        "fssngqccebiansf ",
        "fssngqccjdoansf ",
        "fssnjjoaaaaansf ",
        " fffffffffffff  "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 5)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 4 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #000080",
        /* pixels */
        "                ",
        "aaaaaa          ",
        "abbbbaa         ",
        "abbbbaba        ",
        "abaabacccccc    ",
        "abbbbbcbbbbcc   ",
        "abaaaacbbbbcbc  ",
        "abbbbbcbaabcccc ",
        "abaaaacbbbbbbbc ",
        "abbbbbcbaaaaabc ",
        "aaaaaacbbbbbbbc ",
        "      cbaaaaabc ",
        "      cbbbbbbbc ",
        "      ccccccccc ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 6)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 16 1",
        "  c None",
        "a c Black",
        "b c #BFBF00",
        "c c #555500",
        "d c #909090",
        "e c #3F3F00",
        "f c #AFAFAF",
        "g c #303030",
        "h c #FFFF00",
        "j c #404040",
        "k c #2A2A2A",
        "l c #7F7F00",
        "m c #C0C0C0",
        "n c #DFDFDF",
        "o c #606060",
        "p c #6F6F6F",
        /* pixels */
        "            joa ",
        "           jmmda",
        "          kjdmmo",
        "         ceoodmj",
        "        clhbojj ",
        "       clhhllk  ",
        "      clhhlhc   ",
        "     clhhlhc    ",
        "    clhhlhc     ",
        "   clhhlhc      ",
        "  clhhlhc       ",
        " aghhlhc        ",
        " ppllhc         ",
        "annnlc          ",
        "afnpa           ",
        "aaa             "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 7)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 15 1",
        "  c None",
        "a c Black",
        "b c #BFBF00",
        "c c #555500",
        "d c #909090",
        "e c #3F3F00",
        "f c #AFAFAF",
        "g c #303030",
        "i c #404040",
        "j c #2A2A2A",
        "k c #7F7F00",
        "l c #C0C0C0",
        "m c #DFDFDF",
        "n c #606060",
        "o c #6F6F6F",
        /* pixels */
        "            ina ",
        "           illda",
        "          jidlln",
        "         cenndli",
        "        cklbnii ",
        "       ckllkkj  ",
        "      ckllklc   ",
        "     ckllklc    ",
        "    ckllklc     ",
        "   ckllklc      ",
        "  ckllklc       ",
        " agllklc        ",
        " ookklc         ",
        "ammmkc          ",
        "afmoa           ",
        "aaa             "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap BitmapsList( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 5 1",
        "a c #909090",
        "b c #9F9F9F",
        "c c #C0C0C0",
        "d c #DFDFDF",
        "e c #606060",
        /* pixels */
        "cccccccccccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc",
        "ccceeeeeeeeebccc",
        "ccccaccccccdcccc",
        "ccccaccccccdcccc",
        "cccccaccccdccccc",
        "cccccaccccdccccc",
        "ccccccaccdcccccc",
        "ccccccaccdcccccc",
        "cccccccadccccccc",
        "cccccccadccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc",
        "cccccccccccccccc"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 5 1",
        "  c None",
        "b c #C0C0C0",
        "c c #CFCFCF",
        "d c #DFDFDF",
        "e c #606060",
        /* pixels */
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbecbbbbbbb",
        "bbbbbbbecbbbbbbb",
        "bbbbbbebb bbbbbb",
        "bbbbbbebbcbbbbbb",
        "bbbbbebbbbcbbbbb",
        "bbbbbebbbbcbbbbb",
        "bbbbebbbbbbcbbbb",
        "bbbbebbbbbbcbbbb",
        "bbbedddddddddbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb",
        "bbbbbbbbbbbbbbbb"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap TreeIconsDefault( size_t index )
{
    if (index == 0)
    {
        static const unsigned char data[] = 
        {
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,75,130,168,116,161,189,116,161,189,116,161,189,107,151,182,107,151,182,88,150,190,
            88,150,190,83,139,177,83,139,177,67,136,180,67,129,170,215,224,233,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            127,166,192,209,229,245,202,225,243,195,221,241,188,217,239,175,209,236,165,204,234,151,196,231,151,
            196,231,133,187,226,113,178,222,113,168,209,75,142,191,230,234,241,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,127,166,192,218,
            234,247,209,229,245,202,225,243,195,221,241,188,217,239,175,209,236,165,204,234,151,196,231,151,196,
            231,133,187,226,113,168,209,151,196,231,97,155,196,241,244,247,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,127,166,192,222,237,248,218,234,
            247,209,229,245,202,225,243,195,221,241,188,217,239,175,209,236,165,204,234,151,196,231,151,196,231,
            113,168,209,202,225,243,151,196,231,97,155,196,241,244,247,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,135,171,195,229,240,249,222,237,248,118,186,226,
            118,186,226,99,179,222,99,179,222,99,179,222,99,179,222,84,166,216,99,179,222,113,168,209,233,
            243,250,202,225,243,151,196,231,116,161,189,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,135,171,195,233,243,250,229,240,249,222,237,248,218,234,247,209,
            229,245,202,225,243,195,221,241,188,217,239,175,209,236,165,204,234,113,168,209,250,252,254,233,243,
            250,202,225,243,151,196,231,135,171,195,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,135,171,195,239,246,252,233,243,250,229,240,249,222,237,248,218,234,247,209,229,
            245,202,225,243,195,221,241,188,217,239,175,209,236,113,168,209,113,168,209,113,168,209,113,168,209,
            113,168,209,67,129,170,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,135,171,195,239,246,252,239,246,252,122,196,229,118,186,226,118,186,226,118,186,226,99,179,222,
            99,179,222,99,179,222,99,179,222,99,179,222,84,166,216,84,166,216,151,196,231,133,187,226,83,
            139,177,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,176,195,
            244,249,253,239,246,252,239,246,252,233,243,250,229,240,249,222,237,248,218,234,247,209,229,245,202,
            225,243,195,221,241,188,217,239,182,213,238,165,204,234,151,196,231,151,196,231,83,139,177,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,176,195,247,251,253,244,
            249,253,239,246,252,239,246,252,233,243,250,229,240,249,222,237,248,218,234,247,209,229,245,202,225,
            243,195,221,241,188,217,239,182,213,238,165,204,234,151,196,231,88,150,190,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,176,195,247,251,253,247,251,253,122,196,
            229,122,196,229,122,196,229,122,196,229,118,186,226,118,186,226,118,186,226,99,179,222,99,179,222,
            99,179,222,99,179,222,182,213,238,165,204,234,88,150,190,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,143,176,195,250,252,254,247,251,253,247,251,253,244,249,253,
            239,246,252,239,246,252,233,243,250,229,240,249,222,237,248,218,234,247,209,229,245,202,225,243,195,
            221,241,188,217,239,182,213,238,107,151,182,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,143,176,195,250,252,254,250,252,254,247,251,253,247,251,253,244,249,253,239,
            246,252,239,246,252,233,243,250,229,240,249,222,237,248,218,234,247,209,229,245,202,225,243,195,221,
            241,188,217,239,107,151,182,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,143,176,195,253,253,254,250,252,254,122,196,229,122,196,229,122,196,229,122,196,229,122,196,
            229,122,196,229,122,196,229,118,186,226,118,186,226,118,186,226,99,179,222,202,225,243,195,221,241,
            116,161,189,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,176,
            195,253,253,254,253,253,254,250,252,254,250,252,254,247,251,253,247,251,253,244,249,253,239,246,252,
            239,246,252,233,243,250,229,240,249,222,237,248,218,234,247,209,229,245,202,225,243,116,161,189,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,176,195,255,255,255,
            253,253,254,253,253,254,250,252,254,250,252,254,247,251,253,247,251,253,244,249,253,239,246,252,239,
            246,252,233,243,250,229,240,249,222,237,248,218,234,247,209,229,245,116,161,189,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,176,195,255,255,255,255,255,255,122,
            196,229,122,196,229,122,196,229,122,196,229,122,196,229,122,196,229,122,196,229,122,196,229,122,196,
            229,122,196,229,118,186,226,222,237,248,218,234,247,127,166,192,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,143,176,195,255,255,255,255,255,255,255,255,255,253,253,
            254,253,253,254,250,252,254,250,252,254,247,251,253,247,251,253,244,249,253,239,246,252,239,246,252,
            233,243,250,229,240,249,222,237,248,127,166,192,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,143,176,195,255,255,255,255,255,255,255,255,255,255,255,255,253,253,254,
            253,253,254,250,252,254,250,252,254,247,251,253,247,251,253,244,249,253,239,246,252,239,246,252,233,
            243,250,229,240,249,127,166,192,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,143,176,195,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,254,253,
            253,254,250,252,254,250,252,254,247,251,253,247,251,253,244,249,253,239,246,252,239,246,252,233,243,
            250,135,171,195,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,
            176,195,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,254,253,253,
            254,250,252,254,250,252,254,247,251,253,247,251,253,244,249,253,239,246,252,239,246,252,135,171,195,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,143,176,195,143,176,
            195,143,176,195,143,176,195,143,176,195,143,176,195,143,176,195,143,176,195,143,176,195,143,176,195,
            143,176,195,143,176,195,143,176,195,143,176,195,135,171,195,135,171,195,143,176,195,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216
        };
        wxImage image( 32, 32, (unsigned char*)data, TRUE );
        image.SetMaskColour( 236, 233, 216);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 32 15 1",
        "  c None",
        "a c Black",
        "b c #97C4E7",
        "c c #63B3DE",
        "d c #CAE1F3",
        "e c #7AC4E5",
        "f c #74A1BD",
        "g c #619BC4",
        "h c #4B8EBF",
        "j c #54A6D8",
        "k c #FAFCFE",
        "l c #E9F3FA",
        "m c #76BAE2",
        "n c #C00000",
        "o c #87ABC3",
        /* pixels */
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "        aaaaaaaaaaaaa           ",
        "        annnnnnnnnnaha          ",
        "        annnnnnnnnnabga         ",
        "        annnnnnnnnnadbga        ",
        "        annmmccccjcaldbf        ",
        "        annnnnnnnnnakldbo       ",
        "        annnnnnnnnnaaaaaa       ",
        "        annemmmcccccjjnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        anneeeemmmccccnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        anneeeeeeemmmcnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        anneeeeeeeeeemnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        annnnnnnnnnnnnnna       ",
        "        aaaaaaaaaaaaaaaaa       ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        static const unsigned char data[] = 
        {
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,45,89,163,
            45,89,163,45,89,163,45,89,163,45,89,163,41,81,147,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,110,150,216,110,150,216,110,
            150,216,110,150,216,110,150,216,99,142,213,47,93,169,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,45,89,163,110,150,216,110,150,216,110,150,216,110,150,
            216,110,150,216,110,150,216,110,150,216,45,89,163,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,45,89,163,47,93,169,48,95,172,48,95,172,48,95,172,49,97,177,
            49,97,177,50,99,180,51,102,185,51,102,185,52,103,188,52,103,188,52,103,188,52,103,188,52,
            103,188,53,106,193,53,106,193,53,106,193,53,106,193,45,89,163,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,45,89,163,159,185,229,170,193,232,179,200,235,185,205,237,190,208,238,198,214,240,203,
            217,241,210,223,244,218,229,246,225,233,247,229,237,249,234,240,250,237,242,251,240,245,252,245,248,
            253,250,252,254,253,254,255,253,254,255,45,89,163,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,45,
            89,163,152,181,228,159,185,229,170,193,232,179,200,235,185,205,237,190,208,238,198,214,240,203,217,
            241,210,223,244,218,229,246,225,233,247,229,237,249,234,240,250,237,242,251,240,245,252,245,248,253,
            250,252,254,253,254,255,45,89,163,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,144,175,
            226,152,181,228,159,185,229,170,193,232,174,197,234,185,205,237,190,208,238,198,214,240,203,217,241,
            210,223,244,218,229,246,225,233,247,229,237,249,234,240,250,237,242,251,240,245,252,245,248,253,247,
            249,253,45,89,163,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,137,169,223,144,175,226,
            152,181,228,159,185,229,170,193,232,174,197,234,185,205,237,190,208,238,198,214,240,203,217,241,210,
            223,244,218,229,246,225,233,247,229,237,249,234,240,250,237,242,251,240,245,252,245,248,253,45,89,
            163,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,127,162,221,137,169,223,144,175,226,152,
            181,228,159,185,229,170,193,232,174,197,234,185,205,237,190,208,238,198,214,240,203,217,241,210,223,
            244,218,229,246,225,233,247,229,237,249,234,240,250,237,242,251,240,245,252,45,89,163,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,45,89,163,119,157,219,127,162,221,137,169,223,144,175,226,152,181,
            228,159,185,229,170,193,232,174,197,234,185,205,237,190,208,238,198,214,240,203,217,241,210,223,244,
            218,229,246,225,233,247,229,237,249,234,240,250,237,242,251,45,89,163,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,45,89,163,110,150,216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,
            159,185,229,170,193,232,174,197,234,185,205,237,190,208,238,198,214,240,203,217,241,210,223,244,218,
            229,246,225,233,247,229,237,249,234,240,250,45,89,163,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            45,89,163,99,142,213,110,150,216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,
            185,229,170,193,232,174,197,234,179,200,235,190,208,238,198,214,240,203,217,241,210,223,244,218,229,
            246,225,233,247,229,237,249,45,89,163,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,93,
            137,211,99,142,213,110,150,216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,
            229,170,193,232,174,197,234,179,200,235,190,208,238,198,214,240,203,217,241,210,223,244,218,229,246,
            225,233,247,45,89,163,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,85,132,209,93,137,
            211,99,142,213,110,150,216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,
            170,193,232,174,197,234,179,200,235,190,208,238,198,214,240,203,217,241,210,223,244,218,229,246,45,
            89,163,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,45,89,163,74,124,206,85,132,209,93,137,211,
            99,142,213,110,150,216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,
            193,232,174,197,234,179,200,235,190,208,238,198,214,240,203,217,241,210,223,244,45,89,163,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,45,89,163,64,117,204,74,124,206,85,132,209,93,137,211,99,
            142,213,110,150,216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,
            232,174,197,234,179,200,235,190,208,238,198,214,240,203,217,241,45,89,163,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,45,89,163,58,112,202,64,117,204,74,124,206,85,132,209,93,137,211,99,142,
            213,110,150,216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,
            174,197,234,179,200,235,190,208,238,198,214,240,45,89,163,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,
            45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,45,89,163,45,
            89,163,45,89,163,45,89,163,49,97,177,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216
        };
        wxImage image( 32, 32, (unsigned char*)data, TRUE );
        image.SetMaskColour( 236, 233, 216);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 32 5 1",
        "  c None",
        "a c Black",
        "b c #8399B4",
        "c c #8DA0B9",
        "e c #800000",
        /* pixels */
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "      aaaaaaa                   ",
        "      acccccba                  ",
        "      accccccca                 ",
        "      aaaaaaaaaaaaaaaaaaaa      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aeeeeeeeeeeeeeeeeeea      ",
        "      aaaaaaaaaaaaaaaaaaaa      ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                ",
        "                                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        static const unsigned char data[] = 
        {
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,39,77,139,39,77,139,39,77,139,39,77,139,39,
            77,139,39,77,139,41,81,147,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,41,81,147,110,150,216,110,150,216,110,150,216,110,150,216,110,150,
            216,93,137,211,39,77,139,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,41,81,147,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,
            53,105,191,39,77,139,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            41,81,147,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,45,
            89,163,41,81,147,41,81,147,41,81,147,41,81,147,41,81,147,41,81,147,41,81,147,41,81,
            147,41,81,147,41,81,147,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,41,81,147,110,
            150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,
            216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,
            110,150,216,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,41,81,147,110,150,216,110,150,
            216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,
            110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,110,150,216,47,
            93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,41,81,147,110,150,216,110,150,216,85,132,209,
            47,93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,
            93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,93,169,47,93,
            169,47,93,169,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,41,81,147,110,150,216,110,150,216,48,95,172,93,137,211,119,
            157,219,127,162,221,133,167,223,137,169,223,144,175,226,179,200,235,210,223,244,218,229,246,225,233,
            247,229,237,249,234,240,250,240,245,252,245,248,253,245,248,253,250,252,254,253,254,255,253,254,255,
            49,97,177,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,41,81,147,110,150,216,110,150,216,41,81,147,152,181,228,159,185,229,170,193,
            232,179,200,235,185,205,237,190,208,238,198,214,240,206,220,242,210,223,244,218,229,246,225,233,247,
            229,237,249,234,240,250,240,245,252,245,248,253,245,248,253,250,252,254,185,205,237,47,93,169,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,41,81,147,110,150,216,64,117,204,53,106,193,144,175,226,152,181,228,159,185,229,170,193,232,
            179,200,235,185,205,237,190,208,238,198,214,240,206,220,242,210,223,244,218,229,246,225,233,247,229,
            237,249,234,240,250,240,245,252,245,248,253,245,248,253,47,93,169,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,41,81,147,
            110,150,216,48,95,172,99,142,213,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,179,
            200,235,185,205,237,190,208,238,198,214,240,206,220,242,210,223,244,218,229,246,225,233,247,231,238,
            249,234,240,250,240,245,252,245,248,253,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,41,81,147,110,150,216,41,
            81,147,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,179,200,
            235,185,205,237,190,208,238,198,214,240,206,220,242,210,223,244,218,229,246,225,233,247,231,238,249,
            234,240,250,206,220,242,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,41,81,147,64,117,204,51,102,185,110,150,
            216,119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,179,200,235,
            185,205,237,190,208,238,198,214,240,206,220,242,210,223,244,218,229,246,225,233,247,231,238,249,47,
            93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,41,81,147,48,95,172,74,124,206,99,142,213,110,150,216,
            119,157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,179,200,235,185,
            205,237,190,208,238,198,214,240,206,220,242,210,223,244,218,229,246,225,233,247,47,93,169,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,41,81,147,41,81,147,85,132,209,93,137,211,99,142,213,110,150,216,119,
            157,219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,179,200,235,185,205,
            237,190,208,238,198,214,240,206,220,242,210,223,244,203,217,241,47,93,169,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,33,66,121,48,95,172,74,124,206,85,132,209,93,137,211,99,142,213,110,150,216,119,157,
            219,127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,179,200,235,185,205,237,
            190,208,238,198,214,240,206,220,242,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,33,66,
            121,53,105,191,64,117,204,74,124,206,85,132,209,93,137,211,99,142,213,110,150,216,119,157,219,
            127,162,221,137,169,223,144,175,226,152,181,228,159,185,229,170,193,232,179,200,235,185,205,237,190,
            208,238,198,214,240,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,33,66,121,39,77,139,
            39,77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,
            77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,77,139,39,77,
            139,47,93,169,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,
            236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,
            233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,
            216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216,236,233,216
        };
        wxImage image( 32, 32, (unsigned char*)data, TRUE );
        image.SetMaskColour( 236, 233, 216);
        wxBitmap bitmap( image );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
