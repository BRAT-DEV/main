//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: BratDisplay.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "BratDisplay_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "BratDisplay_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "brathl.h"
#include "wxInterface.h"
#include "new-gui/brat/DataModels/PlotData/BratLookupTable.h"
#include "BratDisplayApp.h"
#include "Validators.h"
#include "LabeledTextCtrl.h"

CFloatValidator floatValidator;
CDigitValidator digitValidator;

int32_t charwidth, charheight;



// Implement window functions

wxSizer *glbSizerAnimation;
wxSizer *glbSizerAnimationDescr;
wxSizer *AnimationToolBar( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    glbSizerAnimation = item0;

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item2 = new wxButton( parent, ID_PLAY, _("Animate"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->SetToolTip( _("Start/Pause running through the frames in the plot in sequence.") );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item3 = new wxSlider( parent, ID_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item3->SetToolTip( _("Drag this slider to manually animate the plot frames.") );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_RESET, _("Reset"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->SetToolTip( _("Reset the plot to its first frame.") );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item5 = new wxSpinCtrl( parent, ID_FRAMECTRL, wxT("0"), wxDefaultPosition, wxSize(60,-1), wxSP_ARROW_KEYS|wxSP_WRAP|wxTE_PROCESS_ENTER|wxTE_RIGHT, 0, 100, 0 );
    item5->SetToolTip( _("Enter the number of a plot frame to display. Use the arrows to increment/decrement by one.") );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item6 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item7 = new wxCheckBox( parent, ID_LOOP, _("Loop"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->SetToolTip( _("\"Automatically restart the animation at the first plot frame.") );
    item1->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Speed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->SetToolTip( _("Enter the animation speed to use, in frames per second. Use the arrows to increment/decrement by one.") );
    item1->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item9 = new wxSpinCtrl( parent, ID_SPEEDFIELD, wxT("1"), wxDefaultPosition, wxSize(60,-1), wxSP_ARROW_KEYS|wxSP_WRAP, 1, 60, 1 );
    item9->SetToolTip( _("Enter the animation speed to use, in frames per second. Use the arrows to increment/decrement by one.") );
    item1->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item10 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item1->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item11 = new wxCheckBox( parent, ID_ANIM_ZOOMTO, _("Automatic zoom to data range"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALL, 0 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );
    glbSizerAnimationDescr = item12;

    wxStaticText *item13 = new wxStaticText( parent, ID_DESCR, _("text"), wxDefaultPosition, wxDefaultSize, wxST_NO_AUTORESIZE );
    item12->Add( item13, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item12, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *WPlotViewStatePanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxSpinCtrl *item2 = new wxSpinCtrl( parent, ID_VIEWCTRL, wxT("0"), wxDefaultPosition, wxSize(50,-1), wxSP_ARROW_KEYS|wxSP_WRAP|wxTE_PROCESS_ENTER|wxTE_RIGHT, 0, 100, 0 );
    item2->SetToolTip( _("Enter the number of a view state  to display. Use the arrows to increment/decrement by one.") );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, ID_SAVEVIEW, _("Save"), wxDefaultPosition, wxSize(50,20), 0 );
    item3->SetDefault();
    item3->SetToolTip( _("Save the current view state") );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_CLEARVIEW, _("Clear"), wxDefaultPosition, wxSize(50,20), 0 );
    item4->SetToolTip( _("Clear all view states") );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_FULLVIEW, _("Full"), wxDefaultPosition, wxSize(50,20), 0 );
    item5->SetToolTip( _("Set intial view (full view)") );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *global_wplotViewSizer;
wxSizer *WPlotView( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("View") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );
    global_wplotViewSizer = item1;

    wxNotebook *item4 = new wxNotebook( parent, ID_VIEW_NOTEBOOK, wxDefaultPosition, wxSize(200,160), 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item3 = new wxNotebookSizer( item4 );
#else
    wxWindow *item3 = item4;
#endif

    wxPanel *item5 = new wxPanel( item4, -1 );
    WPlotViewStatePanel( item5, FALSE );
    item4->AddPage( item5, _("State") );

    wxPanel *item6 = new wxPanel( item4, -1 );
    WPlotViewZoomPanel( item6, FALSE );
    item4->AddPage( item6, _("Zoom") );

    wxPanel *item7 = new wxPanel( item4, -1 );
    WPlotViewZPanel( item7, FALSE );
    item4->AddPage( item7, _("Z (height)") );

    item1->Add( item3, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 1, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *WPlotViewZoomPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

        CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item2 = new CLabeledTextCtrl(parent, NULL, ID_ZOOM_LON1, "Lon1:", "", floatValidator, "%-#.3g", wxSize(5*charwidth, -1));
  //wxWindow *item11 = parent->FindWindow( ID_ZOOM_LON1 );
    wxASSERT( item2 );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item3 = new CLabeledTextCtrl(parent, NULL, ID_ZOOM_LAT1, "Lat1:", "", floatValidator, "%-#.3g", wxSize(5*charwidth, -1));
  //wxWindow *item11 = parent->FindWindow( ID_ZOOM_LON1 );
    wxASSERT( item3 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticLine *item5 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(180,-1), wxLI_HORIZONTAL );
    item4->Add( item5, 0, wxALIGN_CENTER, 5 );

    wxButton *item6 = new wxButton( parent, ID_ZOOM_GO, _("Go"), wxDefaultPosition, wxSize(50,20), 0 );
    item6->SetToolTip( _("Zoom to the nearest captured values ") );
    item4->Add( item6, 0, wxALIGN_CENTER|wxLEFT, 5 );

    item0->Add( item4, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item8 = new CLabeledTextCtrl(parent, NULL, ID_ZOOM_LON2, "Lon2:", "", floatValidator, "%-#.3g", wxSize(5*charwidth, -1));
  //wxWindow *item11 = parent->FindWindow( ID_ZOOM_LON1 );
    wxASSERT( item8 );
    item7->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item7->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item9 = new CLabeledTextCtrl(parent, NULL, ID_ZOOM_LAT2, "Lat2:", "", floatValidator, "%-#.3g", wxSize(5*charwidth, -1));
  //wxWindow *item11 = parent->FindWindow( ID_ZOOM_LON1 );
    wxASSERT( item9 );
    item7->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *WPlotViewZPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Radius"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item3 = new wxSpinCtrl( parent, ID_RADIUSCTRL, wxT("0"), wxDefaultPosition, wxSize(50,-1), wxSP_ARROW_KEYS|wxSP_WRAP|wxTE_PROCESS_ENTER|wxTE_RIGHT, 0, 100, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( 10, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Factor"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item5 = new wxSpinCtrl( parent, ID_FACTORCTRL, wxT("0"), wxDefaultPosition, wxSize(50,-1), wxSP_ARROW_KEYS|wxSP_WRAP|wxTE_PROCESS_ENTER|wxTE_RIGHT, 0, 100, 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ContourPropertiesPanel( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Range") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

        CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item4 = new CLabeledTextCtrl(parent, NULL, ID_CONTOUR_MIN, "Mininum:", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item4 );
    item3->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item3->Add( 5, 10, 0, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item5 = new CLabeledTextCtrl(parent, NULL, ID_CONTOUR_MAX, "Maximum:", "", floatValidator, "%-#.3g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
  //wxWindow *item11 = parent->FindWindow( ID_ZOOM_LON1 );
    wxASSERT( item5 );
    item3->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item7 = new CLabeledTextCtrl(parent, NULL, ID_CONTOUR_NUMBER, "Number of contours:", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);

    wxASSERT( item7 );
    item6->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item9 = new wxStaticBox( parent, -1, _("Lines") );
    wxStaticBoxSizer *item8 = new wxStaticBoxSizer( item9, wxVERTICAL );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item11 = new wxButton( parent, ID_CONTOUR_LINE_COLOR, wxT(""), wxDefaultPosition, wxSize(25,-1), 0 );
    item11->SetToolTip( _("Set the color of the lines") );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, _("Color"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item10->Add( 10, 10, 0, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item13 = new CLabeledTextCtrl(parent, NULL, ID_CONTOUR_LINE_WIDTH, "Width:", "", floatValidator, "%-#.2f", wxSize(5*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item13 );
    item10->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item8->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item15 = new wxStaticBox( parent, -1, _("Labels") );
    wxStaticBoxSizer *item14 = new wxStaticBoxSizer( item15, wxVERTICAL );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item17 = new wxCheckBox( parent, ID_CONTOUR_LABEL, _("Show"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->SetToolTip( _("show labels or not") );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item16->Add( 25, 10, 0, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item18 = new CLabeledTextCtrl(parent, NULL, ID_CONTOUR_LABEL_NUMBER, "Number of labels:", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);

    wxASSERT( item18 );
    item16->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item14->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticLine *item19 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    item14->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item21 = new wxButton( parent, ID_CONTOUR_LABEL_COLOR, wxT(""), wxDefaultPosition, wxSize(25,-1), 0 );
    item21->SetToolTip( _("Set the color of labels") );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, _("Color"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item20->Add( 10, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item23 = new wxCheckBox( parent, ID_CONTOUR_LABEL_COLOR_SAME, _("Same color as lines"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->SetToolTip( _("Set the color of labels with the same color of the lines") );
    item20->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticLine *item24 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    item14->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

        CLabeledTextCtrl *item26 = new CLabeledTextCtrl(parent, NULL, ID_CONTOUR_LABEL_SIZE, "Size:", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);

    wxASSERT( item26 );
    item25->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item25->Add( 20, 10, 0, wxALIGN_CENTER|wxALL, 5 );

        CLabeledTextCtrl *item27 = new CLabeledTextCtrl(parent, NULL, ID_CONTOUR_LABEL_FORMAT, "Format:", "", wxDefaultValidator, "", wxSize(10*charwidth, -1), wxTE_PROCESS_ENTER);

    wxASSERT( item27 );
    item25->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item14->Add( item25, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item29 = new wxButton( parent, ID_CONTOUR_CLOSE, _("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->SetToolTip( _("Close the window without saving properties") );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item30 = new wxButton( parent, ID_CONTOUR_APPLY, _("Apply"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->SetDefault();
    item30->SetToolTip( _("Save and apply properties") );
    item28->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ZFXYMainNotebook( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxNotebook *item2 = new wxNotebook( parent, ID_ZFXYMAINNOTEBOOK, wxDefaultPosition, wxSize(200,160), 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );
#else
    wxWindow *item1 = item2;
#endif

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ZFXYDataProperties( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("General Properties") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item3 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYPLOTPROP_TITLE, "Plot Title:", "", wxDefaultValidator, "", wxSize(10*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item3 );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_ZFXYFULLVIEW, _("Reset View"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->SetToolTip( _("Set axes min./max with original values.") );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item6 = new wxStaticBox( parent, -1, _("Data Layers") );
    wxStaticBoxSizer *item5 = new wxStaticBoxSizer( item6, wxVERTICAL );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Layer:"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs9 = (wxString*) NULL;
    wxChoice *item9 = new wxChoice( parent, ID_ZFXYLAYERCHOICE, wxDefaultPosition, wxSize(200,-1), 0, strs9, 0 );
    item9->SetToolTip( _("Layer to show or modify its properties.") );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 0 );

    item5->Add( item7, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item11 = new wxCheckBox( parent, ID_ZFXYSHOWSOLIDCOLOR, _("Show Solid Color"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->SetToolTip( _("Display or not data values as solid color.") );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, ID_ZFXYEDITSOLIDCOLOR, _("Edit"), wxDefaultPosition, wxSize(60,-1), 0 );
    item12->SetToolTip( _("Show an editor window for the current Color Table.") );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item13 = new wxCheckBox( parent, ID_ZFXYSHOWCONTOUR, _("Show Contour"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->SetToolTip( _("Display or not data values as contour (isosurfaces/isolines).") );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_ZFXYEDITCONTOUR, _("Edit"), wxDefaultPosition, wxSize(60,-1), 0 );
    item14->SetToolTip( _("Show an editor window for the current Contour Properties.") );
    item10->Add( item14, 0, wxALIGN_CENTER|wxALL, 0 );

    item5->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item16 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYNUMLABELS, "Number of Labels (Color Bar):", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item16 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item18 = new wxStaticBox( parent, -1, _("Range") );
    wxStaticBoxSizer *item17 = new wxStaticBoxSizer( item18, wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item19 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYRANGEMIN, "Min.", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item19 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item20 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYRANGEMAX, "Max.", "", floatValidator, "%-#.5g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item20 );
    item17->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item21 = new wxButton( parent, ID_ZFXYRESETRANGE, _("Reset"), wxDefaultPosition, wxSize(60,-1), 0 );
    item21->SetToolTip( _("Set range (min./max) with original values.") );
    item17->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxNotebook *item24 = new wxNotebook( parent, ID_ZFXYAXES, wxDefaultPosition, wxSize(200,-1), 0 );
#if !wxCHECK_VERSION(2,5,2)
    wxNotebookSizer *item23 = new wxNotebookSizer( item24 );
#else
    wxWindow *item23 = item24;
#endif

    wxPanel *item25 = new wxPanel( item24, -1 );
    ZFXYAxisXProperties( item25, FALSE );
    item24->AddPage( item25, _("X axis") );

    wxPanel *item26 = new wxPanel( item24, -1 );
    ZFXYAxisYProperties( item26, FALSE );
    item24->AddPage( item26, _("Y Axis") );

    item22->Add( item23, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ZFXYAxisXProperties( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item2 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYTITLEX, "Label:", "", wxDefaultValidator, "", wxSize(10*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item2 );
    item1->Add( item2, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item4 = new wxCheckBox( parent, ID_ZFXYLOGX, _("Logarithmic Scale"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item7 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYNUMTICKSX, "Number of Ticks:", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item7 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item8 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYBASEX, "Base:", "", floatValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item8 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item9 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYDIGITSX, "Number of Digits:", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item9 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item11 = new wxStaticBox( parent, -1, _("Range") );
    wxStaticBoxSizer *item10 = new wxStaticBoxSizer( item11, wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item12 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYRANGEXMIN, "Min.", "", floatValidator, "%-#.15g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item12 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item13 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYRANGEXMAX, "Max.", "", floatValidator, "%-#.15g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item13 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_ZFXYRESETXRANGE, _("Reset"), wxDefaultPosition, wxSize(60,-1), 0 );
    item14->SetToolTip( _("Set axis min./max with original values.") );
    item10->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ZFXYAxisYProperties( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item2 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYTITLEY, "Label:", "", wxDefaultValidator, "", wxSize(10*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item2 );
    item1->Add( item2, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item4 = new wxCheckBox( parent, ID_ZFXYLOGY, _("Logarithmic Scale"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item7 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYNUMTICKSY, "Number of Ticks:", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item7 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item8 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYBASEY, "Base:", "", floatValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item8 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item9 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYDIGITSY, "Number of Digits:", "", digitValidator, "", wxSize(3*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item9 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item11 = new wxStaticBox( parent, -1, _("Range") );
    wxStaticBoxSizer *item10 = new wxStaticBoxSizer( item11, wxHORIZONTAL );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item12 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYRANGEYMIN, "Min.", "", floatValidator, "%-#.15g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item12 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    CBratDisplayApp::DetermineCharSize(parent, charwidth, charheight);
    CLabeledTextCtrl *item13 = new CLabeledTextCtrl(parent, NULL, ID_ZFXYRANGEYMAX, "Max.", "", floatValidator, "%-#.15g", wxSize(8*charwidth, -1), wxTE_PROCESS_ENTER);
    wxASSERT( item13 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_ZFXYRESETYRANGE, _("Reset"), wxDefaultPosition, wxSize(60,-1), 0 );
    item14->SetToolTip( _("Set axis min./max with original values.") );
    item10->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *BratDisplayMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( wxID_ABOUT, _("&About"), wxT("") );
    item1->Append( wxID_EXIT, _("&Quit\tAlt-q"), wxT("") );
    item0->Append( item1, _("&File") );
    
    return item0;
}

wxMenuBar *WorldPlotFrameMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu( wxMENU_TEAROFF );
    item1->Append( ID_MENU_FILE_SAVE, _("&Save Image...\tCtrl-S"), _("Save the image to an image file") );
    item1->AppendSeparator();
    item1->Append( ID_MENU_FILE_CLOSE, _("&Close\tCtrl-W"), _("Close this Window") );
    item0->Append( item1, _("&File") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( ID_MENU_VIEW_PROPS, _("&Properties"), _("Toggle the display of the Property Panel"), wxITEM_CHECK );
    item2->AppendSeparator();
    item2->Append( ID_MENU_VIEW_COLORBAR, _("&Color Bar"), _("Toggle the display of the Color Bar"), wxITEM_CHECK );
    item2->Append( ID_MENU_VIEW_SLIDER, _("&Animation Toolbar"), _("Toggle the display of the Animation Toolbar"), wxITEM_CHECK );
    item2->AppendSeparator();
    item2->Append( ID_MENU_VIEW_CLUTEDIT, _("Color Table &Editor"), _("Show an editor window for the current Color Table") );
    item2->AppendSeparator();
    item2->Append( ID_MENU_VIEW_CONTOUR_PROPS, _("C&ontour Properties Editor"), _("Show an editor window for the current Contour Properties") );
    item0->Append( item2, _("&View") );
    
    return item0;
}

wxMenuBar *LUTFrameMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu( wxMENU_TEAROFF );
    item1->Append( ID_MENU_FILE_OPEN, _("&Load Color Table...\tCtrl-O"), _("Load Color Table data from a file") );
    
    wxMenu* item2 = new wxMenu;
    item1->Append( ID_MENU_FILE_RECENT, _("&Recent Color Tables"), item2 );

    item1->AppendSeparator();
    item1->Append( ID_MENU_FILE_SAVE, _("&Save Color Table as...\tCtrl-S"), _("Save Color Table data to a file") );
    item1->Append( ID_MENU_FILE_CLOSE, _("&Close\tCtrl-W"), _("Close this Window") );
    item0->Append( item1, _("&File") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( ID_MENU_EDIT_CLEAR, _("&Reset Color Table"), _("Reset the Color Table to all-black values") );
    item3->Append( ID_MENU_EDIT_SETFACET, _("&Number of Values..."), _("Set the number of Color Table values") );
    item3->AppendSeparator();
    item3->Append( ID_MENU_EDIT_LIN, _("&Linear Curve"), _("Values in the Color Table change on a linear curve"), wxITEM_RADIO );
    item3->Append( ID_MENU_EDIT_SQRT, _("&Square Root Curve"), _("Values in the Color Table change on a square root curve"), wxITEM_RADIO );
    item3->Append( ID_MENU_EDIT_COS, _("C&osinusoidal Curve"), _("Values in the Color Table change on a cosinusoidal curve"), wxITEM_RADIO );
    item0->Append( item3, _("&Edit") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( ID_MENU_MODE_STANDARD, _("&Predefined Tables"), _("Choose predefined Color Tables from a list"), wxITEM_RADIO );
    item4->Append( ID_MENU_MODE_GRADIENT, _("&Two-color Gradient"), _("Edit a simple two-color gradient Color Table"), wxITEM_RADIO );
    item4->Append( ID_MENU_MODE_CUSTOM, _("&Multicolor Gradient"), _("Edit a custom multi-gradient Color Table"), wxITEM_RADIO );
    item0->Append( item4, _("&Mode") );
    
    return item0;
}

wxMenuBar *XYPlotFrameMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu( wxMENU_TEAROFF );
    item1->Append( ID_MENU_FILE_SAVE, _("&Save Image...\tCtrl-S"), _("Save the image to an image file") );
    item1->AppendSeparator();
    item1->Append( ID_MENU_FILE_EXPORT, _("Export to &Gnuplot..."), _("Export plot data to gnuplot format") );
    item1->AppendSeparator();
    item1->Append( ID_MENU_FILE_CLOSE, _("&Close\tCtrl-W"), _("Close this Window") );
    item0->Append( item1, _("&File") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( ID_MENU_VIEW_PROPS, _("&Properties"), _("Toggle the display of the Property Panel"), wxITEM_CHECK );
    item2->AppendSeparator();
    item2->Append( ID_MENU_VIEW_SLIDER, _("&Animation Toolbar"), _("Toggle the display of the Animation Toolbar"), wxITEM_CHECK );
    item0->Append( item2, _("&View") );
    
    return item0;
}

wxMenuBar *ZFXYPlotFrameMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu( wxMENU_TEAROFF );
    item1->Append( ID_MENU_FILE_SAVE, _("&Save Image...\tCtrl-S"), _("Save the image to an image file") );
    item1->AppendSeparator();
    item1->Append( ID_MENU_FILE_CLOSE, _("&Close\tCtrl-W"), _("Close this Window") );
    item0->Append( item1, _("&File") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( ID_MENU_VIEW_PROPS, _("&Properties"), _("Toggle the display of the Property Panel"), wxITEM_CHECK );
    item2->AppendSeparator();
    item2->Append( ID_MENU_VIEW_COLORBAR, _("&Color Bar"), _("Toggle the display of the Color Bar"), wxITEM_CHECK );
    item2->Append( ID_MENU_VIEW_SLIDER, _("&Animation Toolbar"), _("Toggle the display of the Animation Toolbar"), wxITEM_CHECK );
    item2->AppendSeparator();
    item2->Append( ID_MENU_VIEW_CLUTEDIT, _("Color Table &Editor"), _("Show an editor window for the current Color Table") );
    item2->AppendSeparator();
    item2->Append( ID_MENU_VIEW_CONTOUR_PROPS, _("C&ontour Properties Editor"), _("Show an editor window for the current Contour Properties") );
    item0->Append( item2, _("&View") );
    
    return item0;
}

wxMenuBar *ContourFrameMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu( wxMENU_TEAROFF );
    item1->Append( ID_MENU_FILE_CLOSE, _("&Close\tCtrl-W"), _("Close this Window") );
    item0->Append( item1, _("&File") );
    
    return item0;
}

// Implement toolbar functions

void MyToolBarFunc( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    
    parent->Realize();
}

// Implement bitmap functions


// End of generated file
